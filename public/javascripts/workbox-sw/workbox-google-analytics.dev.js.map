{"version":3,"file":"workbox-google-analytics.dev.js","sources":["packages/workbox-google-analytics/_version.mjs","packages/workbox-google-analytics/utils/constants.mjs","packages/workbox-google-analytics/_default.mjs","packages/workbox-google-analytics/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:google-analytics:3.0.0-alpha.1']=1;}catch(e){} // eslint-disable-line","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nexport const QUEUE_NAME = 'workbox-google-analytics';\nexport const MAX_RETENTION_TIME = 1000 * 60 * 60 * 48; // Two days\nexport const GOOGLE_ANALYTICS_HOST = 'www.google-analytics.com';\nexport const GTM_HOST = 'www.googletagmanager.com';\nexport const ANALYTICS_JS_PATH = '/analytics.js';\nexport const GTAG_JS_PATH = '/gtag/js';\nexport const COLLECT_PATH = '/collect';\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {Queue} from 'workbox-background-sync/Queue.mjs';\nimport {QueuePlugin} from 'workbox-background-sync/QueuePlugin.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {Route} from 'workbox-routing/Route.mjs';\nimport {Router} from 'workbox-routing/Router.mjs';\nimport {NetworkFirst} from 'workbox-strategies/NetworkFirst.mjs';\nimport {NetworkOnly} from 'workbox-strategies/NetworkOnly.mjs';\nimport {\n  QUEUE_NAME,\n  MAX_RETENTION_TIME,\n  GOOGLE_ANALYTICS_HOST,\n  GTM_HOST,\n  ANALYTICS_JS_PATH,\n  GTAG_JS_PATH,\n  COLLECT_PATH,\n} from './utils/constants.mjs';\nimport './_version.mjs';\n\n/**\n * Promisifies the FileReader API to await a text response from a Blob.\n *\n * @param {Blob} blob\n * @return {Promise<string>}\n *\n * @private\n */\nconst getTextFromBlob = (blob) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n    reader.readAsText(blob);\n  });\n};\n\n/**\n * Creates the requestWillDequeue callback to be used with the background\n * sync queue plugin. The callback takes the failed request and adds the\n * `qt` param based on the current time, as well as applies any other\n * user-defined hit modifications.\n *\n * @param {Object} config See workbox.googleAnalytics.initialize.\n * @return {Function} The requestWillDequeu callback function.\n *\n * @private\n */\nconst createRequestWillReplayCallback = (config) => {\n  return async ({url, timestamp, requestInit}) => {\n    // Measurement protocol requests can set their payload parameters in either\n    // the URL query string (for GET requests) or the POST body.\n    let params;\n    if (requestInit.body) {\n      const payload = await getTextFromBlob(requestInit.body);\n      params = new URLSearchParams(payload);\n    } else {\n      params = new URL(url).searchParams;\n    }\n\n    // Set the qt param prior to apply the hitFilter or parameterOverrides.\n    const queueTime = Date.now() - timestamp;\n    params.set('qt', queueTime);\n\n    if (config.parameterOverrides) {\n      for (const param of Object.keys(config.parameterOverrides)) {\n        const value = config.parameterOverrides[param];\n        params.set(param, value);\n      }\n    }\n\n    if (typeof config.hitFilter === 'function') {\n      config.hitFilter.call(null, params);\n    }\n\n    requestInit.body = params.toString();\n    requestInit.method = 'POST';\n    requestInit.mode = 'cors';\n    requestInit.credentials = 'omit';\n    requestInit.headers = '[[\"Content-Type\", \"text/plain\"]]';\n    requestInit.url = `https://${GOOGLE_ANALYTICS_HOST}/${COLLECT_PATH}`;\n  };\n};\n\n/**\n * Creates GET and POST routes to catch failed Measurement Protocol hits.\n *\n * @param {Queue} queue\n * @return {Array<Route>} The created routes.\n *\n * @private\n */\nconst createCollectRoutes = (queue) => {\n  const match = ({url}) => url.hostname === GOOGLE_ANALYTICS_HOST &&\n      url.pathname === COLLECT_PATH;\n\n  const handler = new NetworkOnly({\n    plugins: [new QueuePlugin(queue)],\n  });\n\n  return [\n    new Route(match, handler, 'GET'),\n    new Route(match, handler, 'POST'),\n  ];\n};\n\n/**\n * Creates a route with a network first strategy for the analytics.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createAnalyticsJsRoute = (cacheName) => {\n  const match = ({url}) => url.hostname === GOOGLE_ANALYTICS_HOST &&\n      url.pathname === ANALYTICS_JS_PATH;\n  const handler = new NetworkFirst({cacheName});\n\n  return new Route(match, handler, 'GET');\n};\n\n/**\n * Creates a route with a network first strategy for the gtag.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createGtagJsRoute = (cacheName) => {\n  const match = ({url}) => url.hostname === GTM_HOST &&\n      url.pathname === GTAG_JS_PATH;\n  const handler = new NetworkFirst({cacheName});\n\n  return new Route(match, handler, 'GET');\n};\n\n/**\n * @param {Object=} [options]\n * @param {Object} [options.cacheName] The cache name to store and retrieve\n *     analytics.js. Defaults to the cache names provided by `workbox-core`.\n * @param {Object} [options.parameterOverrides]\n *     [Measurement Protocol parameters](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),\n *     expressed as key/value pairs, to be added to replayed Google Analytics\n *     requests. This can be used to, e.g., set a custom dimension indicating\n *     that the request was replayed.\n * @param {Function} [options.hitFilter] A function that allows you to modify\n *     the hit parameters prior to replaying\n *     the hit. The function is invoked with the original hit's URLSearchParams\n *     object as its only argument.\n *\n * @memberof workbox.googleAnalytics\n */\nconst initialize = (options = {}) => {\n  const cacheName = cacheNames.getGoogleAnalyticsName(options.cacheName);\n\n  const queue = new Queue(QUEUE_NAME, {\n    maxRetentionTime: MAX_RETENTION_TIME,\n    callbacks: {\n      requestWillReplay: createRequestWillReplayCallback(options),\n    },\n  });\n\n  const routes = [\n    createAnalyticsJsRoute(cacheName),\n    createGtagJsRoute(cacheName),\n    ...createCollectRoutes(queue),\n  ];\n\n  const router = new Router();\n  for (const route of routes) {\n    router.registerRoute(route);\n  }\n\n  self.addEventListener('fetch', (evt) => {\n    const responsePromise = router.handleRequest(evt);\n    if (responsePromise) {\n      evt.respondWith(responsePromise);\n    }\n  });\n};\n\nexport {\n  initialize,\n};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport './_version.mjs';\n\nexport * from './_default.mjs';\n"],"names":["workbox","v","e","QUEUE_NAME","MAX_RETENTION_TIME","GOOGLE_ANALYTICS_HOST","GTM_HOST","ANALYTICS_JS_PATH","GTAG_JS_PATH","COLLECT_PATH","getTextFromBlob","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","error","readAsText","createRequestWillReplayCallback","config","url","timestamp","requestInit","params","body","payload","URLSearchParams","URL","searchParams","queueTime","Date","now","set","parameterOverrides","param","Object","keys","value","hitFilter","call","toString","method","mode","credentials","headers","createCollectRoutes","queue","match","hostname","pathname","handler","NetworkOnly","QueuePlugin","Route","createAnalyticsJsRoute","cacheName","NetworkFirst","createGtagJsRoute","initialize","options","cacheNames","getGoogleAnalyticsName","Queue","routes","router","Router","route","registerRoute","addEventListener","evt","responsePromise","handleRequest","respondWith"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}