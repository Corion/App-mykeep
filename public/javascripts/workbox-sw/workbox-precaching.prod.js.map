{"version":3,"file":"workbox-precaching.prod.js","sources":["packages/workbox-precaching/_version.mjs","packages/workbox-precaching/models/PrecacheEntry.mjs","packages/workbox-precaching/models/PrecachedDetailsModel.mjs","packages/workbox-precaching/utils/cleanRedirect.mjs","packages/workbox-precaching/controllers/PrecacheController.mjs","packages/workbox-precaching/_default.mjs","packages/workbox-precaching/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:precaching:3.0.0-alpha.1']=1;}catch(e){} // eslint-disable-line","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\n/**\n * Used as a consistent way of referencing a URL to precache.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport default class PrecacheEntry {\n/**\n * This class ensures all cache list entries are consistent and\n * adds cache busting if required.\n *\n * @param {*} originalInput\n * @param {string} url\n * @param {string} revision\n * @param {boolean} shouldCacheBust\n */\n  constructor(originalInput, url, revision, shouldCacheBust) {\n    this._originalInput = originalInput;\n    this._entryId = url;\n    this._revision = revision;\n    const requestAsCacheKey = new Request(url);\n    this._cacheRequest = requestAsCacheKey;\n    this._networkRequest = shouldCacheBust ?\n      this._cacheBustRequest(requestAsCacheKey) : requestAsCacheKey;\n  }\n\n  /**\n   * This method will either use Request.cache option OR append a cache\n   * busting parameter to the URL.\n   *\n   * @param {Request} request The request to cache bust\n   * @return {Request} A cachebusted Request\n   *\n   * @private\n   */\n  _cacheBustRequest(request) {\n    let url = request.url;\n    const requestOptions = {};\n    if ('cache' in Request.prototype) {\n      // Make use of the Request cache mode where we can.\n      // Reload skips the HTTP cache for outgoing requests and updates\n      // the cache with the returned reponse.\n      requestOptions.cache = 'reload';\n    } else {\n      const parsedURL = new URL(url, location);\n\n      // This is done so the minifier can mangle 'global.encodeURIComponent'\n      const _encodeURIComponent = encodeURIComponent;\n\n      parsedURL.search += (parsedURL.search ? '&' : '') +\n        _encodeURIComponent(`_workbox-cache-bust`) + '=' +\n        _encodeURIComponent(this._revision);\n      url = parsedURL.toString();\n    }\n\n    return new Request(url, requestOptions);\n  }\n}\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {DBWrapper} from 'workbox-core/_private/DBWrapper.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport '../_version.mjs';\n\n// Allows minifier to mangle this name\nconst REVISON_IDB_FIELD = 'revision';\nconst URL_IDB_FIELD = 'url';\nconst DB_STORE_NAME = 'precached-details-models';\n/**\n * This model will track the relevant information of entries that\n * are cached and their matching revision details.\n *\n * @private\n */\nclass PrecachedDetailsModel {\n  /**\n   * Construct a new model for a specific cache.\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  constructor(cacheName) {\n    this._cacheName = cacheNames.getPrecacheName(cacheName);\n    this._db = new DBWrapper(`workbox-precaching`, 1, {\n      onupgradeneeded: (evt) => {\n        evt.target.result.createObjectStore(DB_STORE_NAME);\n      },\n    });\n  }\n\n  /**\n   * Check if an entry is already cached. Returns false if\n   * the entry isn't cached or the revision has changed.\n   *\n   * @param {PrecacheEntry} precacheEntry\n   * @return {boolean}\n   *\n   * @private\n   */\n  async _isEntryCached(precacheEntry) {\n    const revisionDetails = await this._getRevision(precacheEntry._entryId);\n    if (revisionDetails !== precacheEntry._revision) {\n      return false;\n    }\n\n    const openCache = await caches.open(this._cacheName);\n    const cachedResponse = await openCache.match(precacheEntry._cacheRequest);\n    return !!cachedResponse;\n  }\n\n  /**\n   * @return {Promise<Array>}\n   *\n   * @private\n   */\n  async _getAllEntries() {\n    return await this._db.getAll(DB_STORE_NAME);\n  }\n\n  /**\n   * Get the current revision details.\n   *\n   * @param {Object} entryId\n   * @return {Promise<string|null>}\n   *\n   * @private\n   */\n  async _getRevision(entryId) {\n    const data = await this._db.get(DB_STORE_NAME, entryId);\n    return data ? data[REVISON_IDB_FIELD] : null;\n  }\n\n  /**\n   * Add an entry to the details model.\n   *\n   * @param {PrecacheEntry} precacheEntry\n   *\n   * @private\n   */\n  async _addEntry(precacheEntry) {\n    await this._db.put(\n      DB_STORE_NAME,\n      {\n        [REVISON_IDB_FIELD]: precacheEntry._revision,\n        [URL_IDB_FIELD]: precacheEntry._cacheRequest.url,\n      },\n      precacheEntry._entryId\n    );\n  }\n\n  /**\n   * Delete entry from details model.\n   *\n   * @param {string} entryId\n   *\n   * @private\n   */\n  async _deleteEntry(entryId) {\n    await this._db.delete(DB_STORE_NAME, entryId);\n  }\n}\n\nexport default PrecachedDetailsModel;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\n/**\n * @param {Response} response\n * @return {Response}\n *\n * @private\n * @memberof module:workbox-precachig\n */\nconst cleanRedirect = async (response) => {\n  const clonedResponse = response.clone();\n\n  // Not all browsers support the Response.body stream, so fall back\n  // to reading the entire body into memory as a blob.\n  const bodyPromise = 'body' in clonedResponse ?\n    Promise.resolve(clonedResponse.body) :\n    clonedResponse.blob();\n\n  const body = await bodyPromise;\n\n  // new Response() is happy when passed either a stream or a Blob.\n  return new Response(body, ['headers', 'status', 'statusText'].map((key) => {\n      return clonedResponse[key];\n    })\n  );\n};\n\nexport default cleanRedirect;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport PrecacheEntry from '../models/PrecacheEntry.mjs';\nimport PrecachedDetailsModel from '../models/PrecachedDetailsModel.mjs';\nimport showWarningsIfNeeded from '../utils/showWarningsIfNeeded.mjs';\nimport openInstallLogGroup from '../utils/openInstallLogGroup.mjs';\nimport printCleanupDetails from '../utils/printCleanupDetails.mjs';\nimport cleanRedirect from '../utils/cleanRedirect.mjs';\nimport '../_version.mjs';\n\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox.precaching\n */\nclass PrecacheController {\n  /**\n   * Create a new PrecacheController.\n   *\n   * @param {string} cacheName\n   */\n  constructor(cacheName) {\n    this._cacheName = cacheNames.getPrecacheName(cacheName);\n    this._entriesToCacheMap = new Map();\n    this._precacheDetailsModel = new PrecachedDetailsModel(this._cacheName);\n  }\n\n  /**\n   * This method will add items to the precache list, removing duplicates\n   * and ensuring the information is valid.\n   *\n   * @param {\n   * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\n   * } entries Array of entries to\n   * precache.\n   */\n  addToCacheList(entries) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArray(entries, {\n        moduleName: 'workbox-precaching',\n        className: 'PrecacheController',\n        funcName: 'addToCacheList',\n        paramName: 'entries',\n      });\n    }\n\n    entries.map((userEntry) => {\n      this._addEntryToCacheList(\n        this._parseEntry(userEntry)\n      );\n    });\n  }\n\n  /**\n   * This method returns a precache entry.\n   *\n   * @private\n   * @param {string|Object} input\n   * @return {PrecacheEntry}\n   */\n  _parseEntry(input) {\n    switch (typeof input) {\n      case 'string': {\n        if (process.env.NODE_ENV !== 'production') {\n          if (input.length === 0) {\n            throw new WorkboxError(\n              'add-to-cache-list-unexpected-type', {\n                entry: input,\n              }\n            );\n          }\n        }\n\n        return new PrecacheEntry(input, input, input);\n      }\n      case 'object': {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!input || !input.url) {\n            throw new WorkboxError(\n              'add-to-cache-list-unexpected-type', {\n                entry: input,\n              }\n            );\n          }\n        }\n\n        return new PrecacheEntry(\n          input, input.url, input.revision || input.url, !!input.revision);\n      }\n      default:\n        throw new WorkboxError('add-to-cache-list-unexpected-type', {\n          entry: input,\n        });\n    }\n  }\n\n  /**\n   * Adds an entry to the precache list, accounting for possible duplicates.\n   *\n   * @private\n   * @param {PrecacheEntry} entryToAdd\n   */\n  _addEntryToCacheList(entryToAdd) {\n    // Check if the entry is already part of the map\n    const existingEntry = this._entriesToCacheMap.get(entryToAdd._entryId);\n    if (!existingEntry) {\n      this._entriesToCacheMap.set(entryToAdd._entryId, entryToAdd);\n      return;\n    }\n\n    // Duplicates are fine, but make sure the revision information\n    // is the same.\n    if (existingEntry._revision !== entryToAdd._revision) {\n      throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n        firstEntry: existingEntry._originalInput,\n        secondEntry: entryToAdd._originalInput,\n      });\n    }\n  }\n\n  /**\n   * Call this method from a service work install event to start\n   * precaching assets.\n   *\n   * @param {Object} options\n   * @param {boolean} options.suppressWarnings Suppress warning messages.\n   * @return {\n   * Promise<module:workbox-precaching.PrecacheController.InstallResult>}\n   */\n  async install(options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (options.suppressWarnings !== true) {\n        showWarningsIfNeeded(this._entriesToCacheMap);\n      }\n    }\n\n    const entriesToPrecache = [];\n    const entriesAlreadyPrecached = [];\n\n    for (const precacheEntry of this._entriesToCacheMap.values()) {\n      if (await this._precacheDetailsModel._isEntryCached(precacheEntry)) {\n        entriesAlreadyPrecached.push(precacheEntry);\n      } else {\n        entriesToPrecache.push(precacheEntry);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      openInstallLogGroup(entriesToPrecache, entriesAlreadyPrecached);\n    }\n\n    // Wait for all requests to be cached.\n    await Promise.all(entriesToPrecache.map((precacheEntry) => {\n      return this._cacheEntry(precacheEntry);\n    }));\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupEnd();\n    }\n\n    return {\n      updatedEntries: entriesToPrecache,\n      notUpdatedEntries: entriesAlreadyPrecached,\n    };\n  }\n\n  /**\n   * Requests the entry and saves it to the cache if the response\n   * is valid.\n   *\n   * @private\n   * @param {BaseCacheEntry} precacheEntry The entry to fetch and cache.\n   * @return {Promise<boolean>} Returns a promise that resolves once the entry\n   * has been fetched and cached or skipped if no update is needed. The\n   * promise resolves with true if the entry was cached / updated and\n   * false if the entry is already cached and up-to-date.\n   */\n  async _cacheEntry(precacheEntry) {\n    let response = await fetchWrapper.fetch(\n      precacheEntry._networkRequest,\n    );\n\n    if (response.redirected) {\n      response = await cleanRedirect(response);\n    }\n\n    await cacheWrapper.put(this._cacheName,\n      precacheEntry._cacheRequest, response);\n\n    await this._precacheDetailsModel._addEntry(precacheEntry);\n\n    return true;\n  }\n\n  /**\n   * Compare the URLs and determines which assets are no longer required\n   * in the cache.\n   *\n   * This should be called in the service worker activate event.\n   *\n   * @return {\n   * Promise<module:workbox-precaching.PrecacheController.CleanupResult>}\n   * Resolves with an object containing details of the deleted cache requests\n   * and precache revision details.\n   */\n  async cleanup() {\n    const expectedCacheUrls = [];\n    this._entriesToCacheMap.forEach((entry) => {\n      const fullUrl = new URL(entry._cacheRequest.url, location).toString();\n      expectedCacheUrls.push(fullUrl);\n    });\n\n    const [deletedCacheRequests, deletedRevisionDetails] = await Promise.all([\n      this._cleanupCache(expectedCacheUrls),\n      this._cleanupDetailsModel(expectedCacheUrls),\n    ]);\n\n    if (process.env.NODE_ENV !== 'production') {\n      printCleanupDetails(deletedCacheRequests, deletedRevisionDetails);\n    }\n\n    return {\n      deletedCacheRequests,\n      deletedRevisionDetails,\n    };\n  }\n\n  /**\n   * Goes through all the cache entries and removes any that are\n   * outdated.\n   *\n   * @private\n   * @param {Array<string>} expectedCacheUrls Array of URLs that are\n   * expected to be cached.\n   * @return {Promise<Array<string>>} Resolves to an array of URLs\n   * of cached requests that were deleted.\n   */\n  async _cleanupCache(expectedCacheUrls) {\n    if (!await caches.has(this._cacheName)) {\n      // Cache doesn't exist, so nothing to delete\n      return [];\n    }\n\n    const cache = await caches.open(this._cacheName);\n    const cachedRequests = await cache.keys();\n    const cachedRequestsToDelete = cachedRequests.filter((cachedRequest) => {\n      return !expectedCacheUrls.includes(\n        new URL(cachedRequest.url, location).toString()\n      );\n    });\n\n    await Promise.all(\n      cachedRequestsToDelete.map((cacheUrl) => cache.delete(cacheUrl))\n    );\n\n    return cachedRequestsToDelete.map((request) => request.url);\n  }\n\n  /**\n   * Goes through all entries in indexedDB and removes any that are outdated.\n   *\n   * @private\n   * @param {Array<string>} expectedCacheUrls Array of URLs that are\n   * expected to be cached.\n   * @return {Promise<Array<string>>} Resolves to an array of URLs removed\n   * from indexedDB.\n   */\n  async _cleanupDetailsModel(expectedCacheUrls) {\n    const revisionedEntries = await this._precacheDetailsModel._getAllEntries();\n\n    const detailsToDelete = (Object.keys(revisionedEntries))\n      .filter((entryId) => {\n        const entry = revisionedEntries[entryId];\n        const fullUrl = new URL(entry.url, location).toString();\n        return !expectedCacheUrls.includes(fullUrl);\n      });\n\n    await Promise.all(\n      detailsToDelete.map(\n        (detailsId) => this._precacheDetailsModel._deleteEntry(detailsId)\n      )\n    );\n    return detailsToDelete.map((detailsId) => {\n      return revisionedEntries[detailsId].url;\n    });\n  }\n\n  /**\n   * Returns an array of fully qualified URL's that will be precached.\n   *\n   * @return {Array<string>} An array of URLs.\n   */\n  getCachedUrls() {\n    return Array.from(this._entriesToCacheMap.keys())\n    .map((url) => new URL(url, location).href);\n  }\n}\n\nexport default PrecacheController;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport PrecacheController from './controllers/PrecacheController.mjs';\nimport './_version.mjs';\n\nif (process.env.NODE_ENV !== 'production') {\n  assert.isSwEnv('workbox-precaching');\n}\n\nlet installActivateListenersAdded = false;\nlet fetchListenersAdded = false;\nlet suppressWarnings = false;\n\nconst cacheName = cacheNames.getPrecacheName();\nconst precacheController = new PrecacheController(cacheName);\n\nconst _removeIgnoreUrlParams = (origUrlObject, ignoreUrlParametersMatching) => {\n  // Exclude initial '?'\n  const searchString = origUrlObject.search.slice(1);\n\n  // Split into an array of 'key=value' strings\n  const keyValueStrings = searchString.split('&');\n  const keyValuePairs = keyValueStrings.map((keyValueString) => {\n    // Split each 'key=value' string into a [key, value] array\n    return keyValueString.split('=');\n  });\n  const filteredKeyValuesPairs = keyValuePairs.filter((keyValuePair) => {\n    return ignoreUrlParametersMatching\n      .every((ignoredRegex) => {\n        // Return true iff the key doesn't match any of the regexes.\n        return !ignoredRegex.test(keyValuePair[0]);\n      });\n  });\n  const filteredStrings = filteredKeyValuesPairs.map((keyValuePair) => {\n    // Join each [key, value] array into a 'key=value' string\n    return keyValuePair.join('=');\n  });\n\n  // Join the array of 'key=value' strings into a string with '&' in\n  // between each\n  const urlClone = new URL(origUrlObject);\n  urlClone.search = filteredStrings.join('&');\n  return urlClone;\n};\n\n/**\n * This function will take the request URL and manipulate it based on the\n * configuration options.\n *\n * @param {string} url\n * @param {Object} options\n * @return {string|null} Returns the URL in the cache that matches the request\n * if available, other null.\n *\n * @private\n */\nconst _getPrecachedUrl = (url, {\n  ignoreUrlParametersMatching = [/^utm_/],\n  directoryIndex = 'index.html',\n} = {}) => {\n  const urlObject = new URL(url, location);\n\n  // If we precache '/some-url' but the URL referenced from the browser\n  // is '/some-url#1234', the comparison won't work unless we normalise\n  // the URLS.\n  // See https://github.com/GoogleChrome/workbox/issues/488.\n  urlObject.hash = '';\n\n  const cachedUrls = precacheController.getCachedUrls();\n  if (cachedUrls.indexOf(urlObject.href) !== -1) {\n    // It's a perfect match\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Precaching found an exact URL match for ` +\n        getFriendlyURL(urlObject.toString()));\n    }\n    return urlObject.href;\n  }\n\n  let strippedUrl = _removeIgnoreUrlParams(\n    urlObject, ignoreUrlParametersMatching\n  );\n  if (cachedUrls.indexOf(strippedUrl.href) !== -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Precaching found an exact URL match for stripped URL` +\n        getFriendlyURL(strippedUrl.toString()));\n    }\n    return strippedUrl.href;\n  }\n\n  if (directoryIndex && strippedUrl.pathname.endsWith('/')) {\n    strippedUrl.pathname += directoryIndex;\n    if (cachedUrls.indexOf(strippedUrl.href) !== -1) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Precaching found an exact URL match with ` +\n          `'directoryIndex' ${getFriendlyURL(strippedUrl.toString())}`);\n      }\n      return strippedUrl.href;\n    }\n  }\n\n  return null;\n};\n\nconst moduleExports = {};\n\n/**\n * Add items to the precache list, removing any duplicates and\n * store the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you,\n * it only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n *\n * @alias workbox.precaching.precache\n */\nmoduleExports.precache = (entries) => {\n  precacheController.addToCacheList(entries);\n\n  if (installActivateListenersAdded || entries.length <= 0) {\n    return;\n  }\n\n  installActivateListenersAdded = true;\n  self.addEventListener('install', (event) => {\n    event.waitUntil(precacheController.install({suppressWarnings}));\n  });\n  self.addEventListener('activate', (event) => {\n    event.waitUntil(precacheController.cleanup());\n  });\n};\n\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} options\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreUrlParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n *\n * @alias workbox.precaching.addRoute\n */\nmoduleExports.addRoute = (options) => {\n  if (fetchListenersAdded) {\n    // TODO: Throw error here.\n    return;\n  }\n\n  fetchListenersAdded = true;\n  self.addEventListener('fetch', (event) => {\n    const precachedUrl = _getPrecachedUrl(event.request.url, options);\n    if (!precachedUrl) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Precaching found no match for ` +\n          getFriendlyURL(event.request.url));\n      }\n      return;\n    }\n\n    let responsePromise = caches.open(cacheName)\n    .then((cache) => {\n      return cache.match(precachedUrl);\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      responsePromise = responsePromise.then((response) => {\n        // Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger.groupCollapsed(`Precaching is responding to: ` +\n          getFriendlyURL(event.request.url));\n        logger.log(`Serving the precached url: ${precachedUrl}`);\n\n        // The Request and Response objects contains a great deal of\n        // information, hide it under a group in case developers want to see it.\n        logger.groupCollapsed(`View request details here.`);\n        logger.unprefixed.log(event.request);\n        logger.groupEnd();\n\n        logger.groupCollapsed(`View response details here.`);\n        logger.unprefixed.log(response);\n        logger.groupEnd();\n\n        logger.groupEnd();\n        return response;\n      });\n    }\n    event.respondWith(responsePromise);\n  });\n};\n\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * [precache()]{@link module:workbox-precaching.precache} and\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} options See\n * [addRoute() options]{@link module:workbox-precaching.addRoute}.\n *\n * @alias workbox.precaching.precacheAndRoute\n */\nmoduleExports.precacheAndRoute = (entries, options) => {\n  moduleExports.precache(entries);\n  moduleExports.addRoute(options);\n};\n\n/**\n * Warnings will be logged if any of the precached assets are entered without\n * a `revision` property. This is extremely dangerous if the URL's aren't\n * revisioned. However, the warnings can be supressed with this method.\n *\n * @param {boolean} suppress\n *\n * @alias workbox.precaching.suppressWarnings\n */\nmoduleExports.suppressWarnings = (suppress) => {\n  suppressWarnings = suppress;\n};\n\nexport default moduleExports;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as publicAPI from './_public.mjs';\nimport defaultExport from './_default.mjs';\nimport './_version.mjs';\n\nconst finalExport = Object.assign(defaultExport, publicAPI);\n\nexport default finalExport;\n"],"names":["workbox","v","e","PrecacheEntry","originalInput","url","revision","shouldCacheBust","_originalInput","_entryId","_revision","requestAsCacheKey","Request","_cacheRequest","_networkRequest","this","_cacheBustRequest","request","requestOptions","prototype","cache","parsedURL","URL","location","_encodeURIComponent","encodeURIComponent","search","toString","DB_STORE_NAME","PrecachedDetailsModel","cacheName","_cacheName","cacheNames","getPrecacheName","_db","DBWrapper","evt","target","result","createObjectStore","precacheEntry","_this","_getRevision","caches","open","match","_this2","getAll","entryId","data","_this3","get","_this4","put","_this5","delete","cleanRedirect","response","clonedResponse","clone","body","Promise","resolve","blob","Response","map","key","PrecacheController","_entriesToCacheMap","Map","_precacheDetailsModel","entries","userEntry","_addEntryToCacheList","_parseEntry","input","WorkboxError","entryToAdd","existingEntry","set","options","entriesToPrecache","entriesAlreadyPrecached","values","_isEntryCached","push","all","_cacheEntry","fetchWrapper","fetch","redirected","cacheWrapper","_addEntry","expectedCacheUrls","forEach","entry","fullUrl","deletedCacheRequests","deletedRevisionDetails","_cleanupCache","_cleanupDetailsModel","has","cachedRequestsToDelete","keys","filter","cachedRequest","includes","cacheUrl","revisionedEntries","_getAllEntries","detailsToDelete","Object","detailsId","_deleteEntry","Array","from","href","installActivateListenersAdded","fetchListenersAdded","suppressWarnings","precacheController","moduleExports","precache","addToCacheList","length","addEventListener","event","waitUntil","install","cleanup","addRoute","precachedUrl","urlObject","hash","cachedUrls","getCachedUrls","indexOf","strippedUrl","origUrlObject","ignoreUrlParametersMatching","filteredStrings","slice","split","keyValueString","keyValuePair","every","ignoredRegex","test","join","urlClone","_removeIgnoreUrlParams","directoryIndex","pathname","endsWith","_getPrecachedUrl","responsePromise","then","respondWith","precacheAndRoute","suppress","assign","defaultExport","publicAPI"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}