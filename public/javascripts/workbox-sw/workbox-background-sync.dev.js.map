{"version":3,"file":"workbox-background-sync.dev.js","sources":["packages/workbox-background-sync/_version.mjs","packages/workbox-background-sync/models/StorableRequest.mjs","packages/workbox-background-sync/utils/constants.mjs","packages/workbox-background-sync/models/QueueStore.mjs","packages/workbox-background-sync/Queue.mjs","packages/workbox-background-sync/QueuePlugin.mjs","packages/workbox-background-sync/_public.mjs","packages/workbox-background-sync/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:background-sync:3.0.0-alpha.1']=1;}catch(e){} // eslint-disable-line","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nconst serializableProperties = [\n  'method',\n  'referrer',\n  'referrerPolicy',\n  'mode',\n  'credentials',\n  'cache',\n  'redirect',\n  'integrity',\n  'keepalive',\n  'signal',\n];\n\n\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * @private\n */\nexport default class StorableRequest {\n  /**\n   * Converts a Request object to a plain object that can be structured\n   * cloned or JSON-stringified.\n   *\n   * @param {Request} request\n   * @return {Promise<StorableRequest>}\n   */\n  static async fromRequest(request) {\n    const requestInit = {headers: {}};\n\n    // Set the body if present.\n    if (request.method !== 'GET') {\n      // Use blob to support non-text request bodies,\n      // and clone first in case the caller still needs the request.\n      requestInit.body = await request.clone().blob();\n    }\n\n    // Convert the headers from an iterable to an object.\n    for (const [key, value] of request.headers.entries()) {\n      requestInit.headers[key] = value;\n    }\n\n    // Add all other serializable request properties\n    for (const prop of serializableProperties) {\n      if (request[prop] !== undefined) {\n        requestInit[prop] = request[prop];\n      }\n    }\n\n    return new StorableRequest({url: request.url, requestInit});\n  }\n\n  /**\n   * Accepts a URL and RequestInit dictionary that can be used to create a\n   * new Request object. A timestamp is also generated so consumers can\n   * reference when the object was created.\n   *\n   * @param {Object} param1\n   * @param {string} param1.url\n   * @param {Object} param1.requestInit\n   *     See: https://fetch.spec.whatwg.org/#requestinit\n   * @param {number} param1.timestamp The time the request was created,\n   *     defaulting to the current time if not specified.\n   */\n  constructor({url, requestInit, timestamp = Date.now()}) {\n    this.url = url;\n    this.requestInit = requestInit;\n\n    // \"Private\"\n    this._timestamp = timestamp;\n  }\n\n  /**\n   * Gets the private _timestamp property.\n   *\n   * @return {number}\n   */\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  /**\n   * Coverts this instance to a plain Object.\n   *\n   * @return {Object}\n   */\n  toObject() {\n    return {\n      url: this.url,\n      timestamp: this.timestamp,\n      requestInit: this.requestInit,\n    };\n  }\n\n  /**\n   * Converts this instance to a Request.\n   *\n   * @return {Request}\n   */\n  toRequest() {\n    return new Request(this.url, this.requestInit);\n  }\n}\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nexport const DB_NAME = 'workbox-background-sync';\nexport const OBJECT_STORE_NAME = 'requests';\nexport const INDEXED_PROP = 'queueName';\nexport const TAG_PREFIX = 'workbox-background-sync';\nexport const MAX_RETENTION_TIME = 1000 * 60 * 60 * 24 * 7; // 7 days\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {DBWrapper} from 'workbox-core/_private/DBWrapper.mjs';\nimport StorableRequest from './StorableRequest.mjs';\nimport {DB_NAME, OBJECT_STORE_NAME, INDEXED_PROP} from '../utils/constants.mjs';\nimport '../_version.mjs';\n\n/**\n * A class to manage storing requests from a Queue in IndexedbDB,\n * indexed by their queue name for easier access.\n *\n * @private\n */\nexport class QueueStore {\n  /**\n   * Associates this instance with a Queue instance, so entries added can be\n   * identified by their queue name.\n   *\n   * @param {Queue} queue\n   *\n   * @private\n   */\n  constructor(queue) {\n    this._queue = queue;\n    this._db = new DBWrapper(DB_NAME, 1, {\n      onupgradeneeded: (evt) => evt.target.result\n          .createObjectStore(OBJECT_STORE_NAME, {autoIncrement: true})\n          .createIndex(INDEXED_PROP, INDEXED_PROP, {unique: false}),\n    });\n  }\n\n  /**\n   * Takes a StorableRequest instance, converts it to an object and adds it\n   * as an entry in the object store.\n   *\n   * @param {StorableRequest} storableRequest\n   *\n   * @private\n   */\n  async addEntry(storableRequest) {\n    await this._db.add(OBJECT_STORE_NAME, {\n      queueName: this._queue.name,\n      storableRequest: storableRequest.toObject(),\n    });\n  }\n\n  /**\n   * Gets the oldest entry in the object store, removes it, and returns the\n   * value as a StorableRequest instance. If no entry exists, it returns\n   * undefined.\n   *\n   * @return {StorableRequest|undefined}\n   *\n   * @private\n   */\n  async getAndRemoveOldestEntry() {\n    const [entry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      index: INDEXED_PROP,\n      query: IDBKeyRange.only(this._queue.name),\n      count: 1,\n      includeKeys: true,\n    });\n\n    if (entry) {\n      await this._db.delete(OBJECT_STORE_NAME, entry.primaryKey);\n      return new StorableRequest(entry.value.storableRequest);\n    }\n  }\n}\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {QueueStore} from './models/QueueStore.mjs';\nimport StorableRequest from './models/StorableRequest.mjs';\nimport {TAG_PREFIX, MAX_RETENTION_TIME} from './utils/constants.mjs';\nimport './_version.mjs';\n\nconst queueNames = new Set();\n\n\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof workbox.backgroundSync\n */\nclass Queue {\n  /**\n   * Creates an instance of Queue with the given options\n   *\n   * @param {string} name The unique name for this queue. This name must be\n   *     unique as it's used to register sync events and store requests\n   *     in IndexedDB specific to this instance. An error will be thrown if\n   *     a duplicate name is detected.\n   * @param {Object} [options]\n   * @param {Object} [options.callbacks] Callbacks to observe the lifecycle of\n   *     queued requests. Use these to respond to or modify the requests\n   *     during the replay process.\n   * @param {function(StorableRequest):undefined}\n   *     [options.callbacks.requestWillEnqueue]\n   *     Invoked immediately before the request is stored to IndexedDB. Use\n   *     this callback to modify request data at store time.\n   * @param {function(StorableRequest):undefined}\n   *     [options.callbacks.requestWillReplay]\n   *     Invoked immediately before the request is re-fetched. Use this\n   *     callback to modify request data at fetch time.\n   * @param {function(Array<StorableRequest>):undefined}\n   *     [options.callbacks.queueDidReplay]\n   *     Invoked after all requests in the queue have successfully replayed.\n   * @param {number} [options.maxRetentionTime = 7 days] The amount of time (in\n   *     ms) a request may be retried. After this amount of time has passed,\n   *     the request will be deleted from the queue.\n   */\n  constructor(name, {\n    callbacks = {},\n    maxRetentionTime = MAX_RETENTION_TIME,\n  } = {}) {\n    // Ensure the store name is not already being used\n    if (queueNames.has(name)) {\n      throw new WorkboxError('duplicate-queue-name', {name});\n    } else {\n      queueNames.add(name);\n    }\n\n    this._name = name;\n    this._callbacks = callbacks;\n    this._maxRetentionTime = maxRetentionTime;\n    this._queueStore = new QueueStore(this);\n\n    this._addSyncListener();\n  }\n\n  /**\n   * @return {string}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Stores the passed request into IndexedDB. The database used is\n   * `workbox-background-sync` and the object store name is the same as\n   * the name this instance was created with (to guarantee it's unique).\n   *\n   * @param {Request} request The request object to store.\n   */\n  async addRequest(request) {\n    const storableRequest = await StorableRequest.fromRequest(request.clone());\n\n    await this._runCallback('requestWillEnqueue', storableRequest);\n\n    await this._queueStore.addEntry(storableRequest);\n    await this._registerSync();\n  }\n\n  /**\n   * Retrieves all stored requests in IndexedDB and retries them. If the\n   * queue contained requests that were successfully replayed, the\n   * `queueDidReplay` callback is invoked (which implies the queue is\n   * now empty). If any of the requests fail, a new sync registration is\n   * created to retry again later.\n   */\n  async replayRequests() {\n    const now = Date.now();\n    const replayedRequests = [];\n    const failedRequests = [];\n\n    let storableRequest;\n    while (storableRequest = await this._queueStore.getAndRemoveOldestEntry()) {\n      // Ignore requests older than maxRetentionTime.\n      if (now - storableRequest.timestamp > this._maxRetentionTime) {\n        continue;\n      }\n\n      await this._runCallback('requestWillReplay', storableRequest);\n\n      const replay = {request: storableRequest.toRequest()};\n\n      try {\n        // Clone the request before fetching so callbacks get an unused one.\n        replay.response = await fetch(replay.request.clone());\n      } catch (err) {\n        replay.error = err;\n        failedRequests.push(storableRequest);\n      }\n\n      replayedRequests.push(replay);\n    }\n\n    // If any requests failed, put the failed requests back in the queue\n    // and register for another sync.\n    if (failedRequests.length) {\n      await Promise.all(failedRequests.map((storableRequest) => {\n        return this._queueStore.addEntry(storableRequest);\n      }));\n\n      await this._registerSync();\n    }\n\n    await this._runCallback('queueDidReplay', replayedRequests);\n  }\n\n  /**\n   * Runs the passed callback if it exists.\n   *\n   * @private\n   * @param {string} name The name of the callback on this._callbacks.\n   * @param {...*} args The arguments to invoke the callback with.\n   */\n  async _runCallback(name, ...args) {\n    if (typeof this._callbacks[name] === 'function') {\n      await this._callbacks[name].apply(null, args);\n    }\n  }\n\n  /**\n   * In sync-supporting browsers, this adds a listener for the sync event.\n   * In non-sync-supporting browsers, this will retry the queue on service\n   * worker startup.\n   *\n   * @private\n   */\n  _addSyncListener() {\n    if ('sync' in registration) {\n      self.addEventListener('sync', (event) => {\n        event.waitUntil(this.replayRequests());\n      });\n    } else {\n      // If the browser doesn't support background sync, retry\n      // every time the service worker starts up as a fallback.\n      this.replayRequests();\n    }\n  }\n\n  /**\n   * Registers a sync event with a tag unique to this instance.\n   *\n   * @private\n   */\n  async _registerSync() {\n    try {\n      await registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n    } catch (err) {\n      // This means the registration failed for some reason, either because\n      // the browser doesn't supported it or because the user has disabled it.\n      // In either case, do nothing.\n    }\n  }\n\n  /**\n   * Returns the set of queue names. This is primarily used to reset the list\n   * of queue names in tests.\n   *\n   * @return {Set}\n   *\n   * @private\n   */\n  static get _queueNames() {\n    return queueNames;\n  }\n}\n\nexport {Queue};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport './_version.mjs';\n\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof workbox.backgroundSync\n */\nclass QueuePlugin {\n  /**\n   * @param {Queue} queue The Queue instance to add failed requests to.\n   */\n  constructor(queue) {\n    this._queue = queue;\n    this.fetchDidFail = this.fetchDidFail.bind(this);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @private\n   */\n  async fetchDidFail({request}) {\n    await this._queue.addRequest(request);\n  }\n}\n\nexport {QueuePlugin};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {Queue} from './Queue.mjs';\nimport {QueuePlugin} from './QueuePlugin.mjs';\nimport './_version.mjs';\n\nexport {\n  Queue,\n  QueuePlugin,\n};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport * as publicAPI from './_public.mjs';\nimport './_version.mjs';\n\nexport default publicAPI;\n"],"names":["workbox","v","e","serializableProperties","StorableRequest","fromRequest","request","requestInit","headers","method","body","clone","blob","key","value","entries","prop","undefined","url","timestamp","Date","now","_timestamp","Request","DB_NAME","OBJECT_STORE_NAME","INDEXED_PROP","TAG_PREFIX","MAX_RETENTION_TIME","QueueStore","queue","_queue","_db","DBWrapper","evt","target","result","createObjectStore","autoIncrement","createIndex","unique","storableRequest","add","name","toObject","entry","getAllMatching","IDBKeyRange","only","delete","primaryKey","queueNames","Set","Queue","has","WorkboxError","_name","_callbacks","callbacks","_maxRetentionTime","maxRetentionTime","_queueStore","_addSyncListener","_runCallback","addEntry","_registerSync","replayedRequests","failedRequests","getAndRemoveOldestEntry","replay","toRequest","response","fetch","err","error","push","length","Promise","all","map","args","apply","registration","addEventListener","event","waitUntil","replayRequests","sync","register","_queueNames","QueuePlugin","fetchDidFail","bind","addRequest"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}