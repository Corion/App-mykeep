{"version":3,"file":"workbox-cacheable-response.dev.js","sources":["packages/workbox-cacheable-response/_version.mjs","packages/workbox-cacheable-response/CacheableResponse.mjs","packages/workbox-cacheable-response/CacheableResponsePlugin.mjs","packages/workbox-cacheable-response/_public.mjs","packages/workbox-cacheable-response/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:cacheable-response:3.0.0-alpha.1']=1;}catch(e){} // eslint-disable-line","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox.cacheableResponse\n */\nclass CacheableResponse {\n  /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.statuses || config.headers)) {\n        throw new WorkboxError('statuses-or-headers-required', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n        });\n      }\n\n      if (config.statuses) {\n        assert.isArray(config.statuses, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.statuses',\n        });\n      }\n\n      if (config.headers) {\n        assert.isType(config.headers, 'object', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.headers',\n        });\n      }\n    }\n\n    this._statuses = config.statuses;\n    this._headers = config.headers;\n  }\n\n  /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param {Response} response The response whose cacheability is being\n   * checked.\n   * @return {boolean} `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */\n  isResponseCacheable(response) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(response, Response, {\n        moduleName: 'workbox-cacheable-response',\n        className: 'CacheableResponse',\n        funcName: 'isResponseCacheable',\n        paramName: 'response',\n      });\n    }\n\n    let cacheable = true;\n\n    if (this._statuses) {\n      cacheable = this._statuses.includes(response.status);\n    }\n\n    if (this._headers && cacheable) {\n      cacheable = Object.keys(this._headers).some((headerName) => {\n        return response.headers.get(headerName) === this._headers[headerName];\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!cacheable) {\n        logger.groupCollapsed(`The request for ` +\n          `'${getFriendlyURL(response.url)}' returned a response that does ` +\n          `not meet the criteria for being cached.`);\n\n        logger.groupCollapsed(`View response details here.`);\n        logger.unprefixed.log(response);\n        logger.groupEnd();\n\n        logger.groupCollapsed(`View cacheability criteria here.`);\n        logger.unprefixed.log(`Cacheable statuses: ` +\n          JSON.stringify(this._statuses));\n        logger.unprefixed.log(`Cacheable headers: ` +\n          JSON.stringify(this._headers));\n        logger.groupEnd();\n\n        logger.groupEnd();\n        logger.debug();\n      }\n    }\n\n    return cacheable;\n  }\n}\n\nexport {CacheableResponse};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n     http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {CacheableResponse} from './CacheableResponse.mjs';\nimport './_version.mjs';\n\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox.cacheableResponse\n */\nclass CacheableResponsePlugin {\n  /**\n   * To construct a new CacheableResponsePlugin instance you must provide at\n   * least one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config = {}) {\n    this._cacheableResponse = new CacheableResponse(config);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Response} options.response\n   * @return {boolean}\n   * @private\n   */\n  cacheWillUpdate({response}) {\n    return this._cacheableResponse.isResponseCacheable(response);\n  }\n}\n\nexport {CacheableResponsePlugin};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {CacheableResponse} from './CacheableResponse.mjs';\nimport {CacheableResponsePlugin} from './CacheableResponsePlugin.mjs';\nimport './_version.mjs';\n\nexport {\n  CacheableResponse,\n  CacheableResponsePlugin,\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport './_version.mjs';\n\nexport * from './_public.mjs';\n"],"names":["workbox","v","e","CacheableResponse","config","statuses","headers","WorkboxError","isArray","isType","_statuses","_headers","response","isInstance","Response","cacheable","includes","status","Object","keys","some","headerName","get","groupCollapsed","getFriendlyURL","url","unprefixed","log","groupEnd","JSON","stringify","debug","CacheableResponsePlugin","_cacheableResponse","isResponseCacheable"],"mappings":";;;;AAAA,IAAG;OAAMA,OAAL,CAAaC,CAAb,CAAe,0CAAf,IAA2D,CAA3D;CAAJ,CAAkE,OAAMC,CAAN,EAAQ;;ACA1E;;;;;;;;;;;;;;;;AAgBA,AAMA;;;;;;;;AAQA,MAAMC,iBAAN,CAAwB;;;;;;;;;;;;;;;cAeVC,SAAS,EAArB,EAAyB;IACoB;UACrC,EAAEA,OAAOC,QAAP,IAAmBD,OAAOE,OAA5B,CAAJ,EAA0C;cAClC,IAAIC,6BAAJ,CAAiB,8BAAjB,EAAiD;sBACzC,4BADyC;qBAE1C,mBAF0C;oBAG3C;SAHN,CAAN;;;UAOEH,OAAOC,QAAX,EAAqB;0BACZG,OAAP,CAAeJ,OAAOC,QAAtB,EAAgC;sBAClB,4BADkB;qBAEnB,mBAFmB;oBAGpB,aAHoB;qBAInB;SAJb;;;UAQED,OAAOE,OAAX,EAAoB;0BACXG,MAAP,CAAcL,OAAOE,OAArB,EAA8B,QAA9B,EAAwC;sBAC1B,4BAD0B;qBAE3B,mBAF2B;oBAG5B,aAH4B;qBAI3B;SAJb;;;;SASCI,SAAL,GAAiBN,OAAOC,QAAxB;SACKM,QAAL,GAAgBP,OAAOE,OAAvB;;;;;;;;;;;;sBAYkBM,QAApB,EAA8B;IACe;wBAClCC,UAAP,CAAkBD,QAAlB,EAA4BE,QAA5B,EAAsC;oBACxB,4BADwB;mBAEzB,mBAFyB;kBAG1B,qBAH0B;mBAIzB;OAJb;;;QAQEC,YAAY,IAAhB;;QAEI,KAAKL,SAAT,EAAoB;kBACN,KAAKA,SAAL,CAAeM,QAAf,CAAwBJ,SAASK,MAAjC,CAAZ;;;QAGE,KAAKN,QAAL,IAAiBI,SAArB,EAAgC;kBAClBG,OAAOC,IAAP,CAAY,KAAKR,QAAjB,EAA2BS,IAA3B,CAAiCC,UAAD,IAAgB;eACnDT,SAASN,OAAT,CAAiBgB,GAAjB,CAAqBD,UAArB,MAAqC,KAAKV,QAAL,CAAcU,UAAd,CAA5C;OADU,CAAZ;;;IAKyC;UACrC,CAACN,SAAL,EAAgB;0BACPQ,cAAP,CAAuB,kBAAD,GACnB,IAAGC,kCAAeZ,SAASa,GAAxB,CAA6B,kCADb,GAEnB,yCAFH;;0BAIOF,cAAP,CAAuB,6BAAvB;0BACOG,UAAP,CAAkBC,GAAlB,CAAsBf,QAAtB;0BACOgB,QAAP;;0BAEOL,cAAP,CAAuB,kCAAvB;0BACOG,UAAP,CAAkBC,GAAlB,CAAuB,sBAAD,GACpBE,KAAKC,SAAL,CAAe,KAAKpB,SAApB,CADF;0BAEOgB,UAAP,CAAkBC,GAAlB,CAAuB,qBAAD,GACpBE,KAAKC,SAAL,CAAe,KAAKnB,QAApB,CADF;0BAEOiB,QAAP;;0BAEOA,QAAP;0BACOG,KAAP;;;;WAIGhB,SAAP;;;;ACnIJ;;;;;;;;;;;;;AAaA,AAGA;;;;;;;AAOA,MAAMiB,uBAAN,CAA8B;;;;;;;;;;;;;;;cAehB5B,SAAS,EAArB,EAAyB;SAClB6B,kBAAL,GAA0B,IAAI9B,iBAAJ,CAAsBC,MAAtB,CAA1B;;;;;;;;;kBASc,EAACQ,QAAD,EAAhB,EAA4B;WACnB,KAAKqB,kBAAL,CAAwBC,mBAAxB,CAA4CtB,QAA5C,CAAP;;;;ACjDJ;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}