{"version":3,"file":"workbox-core.dev.js","sources":["packages/workbox-core/_version.mjs","packages/workbox-core/models/LogLevels.mjs","packages/workbox-core/models/messages/messages.mjs","packages/workbox-core/models/messages/messageGenerator.mjs","packages/workbox-core/_private/WorkboxError.mjs","packages/workbox-core/_private/cacheNames.mjs","packages/workbox-core/_private/logger.mjs","packages/workbox-core/_private/assert.mjs","packages/workbox-core/_default.mjs","packages/workbox-core/_private/getFriendlyURL.mjs","packages/workbox-core/models/pluginEvents.mjs","packages/workbox-core/utils/pluginUtils.mjs","packages/workbox-core/_private/cacheWrapper.mjs","packages/workbox-core/_private/fetchWrapper.mjs","packages/workbox-core/_private/DBWrapper.mjs","packages/workbox-core/_private.mjs","packages/workbox-core/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:core:3.0.0-alpha.1']=1;}catch(e){} // eslint-disable-line","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\n/**\n * The available log levels in Workbox: debug, log, warn, error and silent.\n *\n * @property {int} debug Prints all logs from Workbox. Useful for debugging.\n * @property {int} log Prints console log, warn, error and groups. Default for\n * debug builds.\n * @property {int} warn Prints console warn, error and groups. Default for\n * non-debug builds.\n * @property {int} error Print console error and groups.\n * @property {int} silent Force no logging from Workbox.\n *\n * @alias workbox.core.LOG_LEVELS\n */\n\nexport default {\n  debug: 0,\n  log: 1,\n  warn: 2,\n  error: 3,\n  silent: 4,\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../../_version.mjs';\n\nexport default {\n  'invalid-value': ({paramName, validValueDescription, value}) => {\n    if (!paramName || !validValueDescription) {\n      throw new Error(`Unexpected input to 'invalid-value' error.`);\n    }\n    return `The '${paramName}' parameter was given a value with an ` +\n      `unexpected value. ${validValueDescription} Received a value of ` +\n      `${JSON.stringify(value)}.`;\n  },\n\n  'not-in-sw': ({moduleName}) => {\n    if (!moduleName) {\n      throw new Error(`Unexpected input to 'not-in-sw' error.`);\n    }\n    return `The '${moduleName}' must be used in a service worker.`;\n  },\n\n  'not-an-array': ({moduleName, className, funcName, paramName}) => {\n    if (!moduleName || !className || !funcName || !paramName) {\n      throw new Error(`Unexpected input to 'not-an-array' error.`);\n    }\n    return `The parameter '${paramName}' passed into ` +\n      `'${moduleName}.${className}.${funcName}()' must be an array.`;\n  },\n\n  'incorrect-type': ({expectedType, paramName, moduleName, className,\n                   funcName}) => {\n    if (!expectedType || !paramName || !moduleName || !className || !funcName) {\n      throw new Error(`Unexpected input to 'incorrect-type' error.`);\n    }\n    return `The parameter '${paramName}' passed into ` +\n      `'${moduleName}.${className}.${funcName}()' must be of type ` +\n      `${expectedType}.`;\n  },\n\n  'incorrect-class': ({expectedClass, paramName, moduleName, className,\n                       funcName}) => {\n    if (!expectedClass || !paramName || !moduleName || !className ||\n      !funcName) {\n      throw new Error(`Unexpected input to 'incorrect-class' error.`);\n    }\n    return `The parameter '${paramName}' passed into ` +\n      `'${moduleName}.${className}.${funcName}()' must be an instance of ` +\n      `class ${expectedClass.name}.`;\n  },\n\n  'missing-a-method': ({expectedMethod, paramName, moduleName, className,\n                    funcName}) => {\n    if (!expectedMethod || !paramName || !moduleName || !className\n        || !funcName) {\n      throw new Error(`Unexpected input to 'missing-a-method' error.`);\n    }\n    return `${moduleName}.${className}.${funcName}() expected the ` +\n      `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n  },\n\n  'add-to-cache-list-unexpected-type': ({entry}) => {\n    return `An unexpected entry was passed to ` +\n    `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n    `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n    `strings with one or more characters, objects with a url property or ` +\n    `Request objects.`;\n  },\n\n  'add-to-cache-list-conflicting-entries': ({firstEntry, secondEntry}) => {\n    if (!firstEntry || !secondEntry) {\n      throw new Error(`Unexpected input to ` +\n        `'add-to-cache-list-duplicate-entries' error.`);\n    }\n\n    return `Two of the entries passed to ` +\n      `'workbox-precaching.PrecacheController.addToCacheList()' had matching ` +\n      `URLs but different revision details. This means workbox-precaching ` +\n      `is unable to determine cache the asset correctly. Please remove one ` +\n      `of the entries.`;\n  },\n\n  'plugin-error-request-will-fetch': ({thrownError}) => {\n    if (!thrownError) {\n      throw new Error(`Unexpected input to ` +\n        `'plugin-error-request-will-fetch', error.`);\n    }\n\n    return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\n      `The thrown error message was: '${thrownError.message}'.`;\n  },\n\n  'invalid-cache-name': ({cacheNameId, value}) => {\n    if (!cacheNameId) {\n      throw new Error(\n        `Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n    }\n\n    return `You must provide a name containing at least one character for ` +\n      `setCacheDeatils({${cacheNameId}: '...'}). Received a value of ` +\n      `'${JSON.stringify(value)}'`;\n  },\n\n  'unregister-route-but-not-found-with-method': ({method}) => {\n    if (!method) {\n      throw new Error(`Unexpected input to ` +\n        `'unregister-route-but-not-found-with-method' error.`);\n    }\n\n    return `The route you're trying to unregister was not  previously ` +\n      `registered for the method type '${method}'.`;\n  },\n\n  'unregister-route-route-not-registered': () => {\n    return `The route you're trying to unregister was not previously ` +\n      `registered.`;\n  },\n\n  'duplicate-queue-name': ({name}) => {\n    return `The Queue name '${name}' is already being used. ` +\n        `All instances of backgroundSync.Queue must be given unique names.`;\n  },\n\n  'expired-test-without-max-age': ({methodName, paramName}) => {\n    return `The '${methodName}()' method can only be used when the ` +\n      `'${paramName}' is used in the constructor.`;\n  },\n\n  'unsupported-route-type': ({moduleName, className, funcName, paramName}) => {\n    return `The supplied '${paramName}' parameter was an unsupported type. ` +\n      `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n      `valid input types.`;\n  },\n\n  'not-array-of-class': ({value, expectedClass,\n    moduleName, className, funcName, paramName}) => {\n    return `The supplied '${paramName}' parameter must be an array of ` +\n      `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n      `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n      `to fix the issue.`;\n  },\n\n  'max-entries-or-age-required': ({moduleName, className, funcName}) => {\n    return `You must define either config.maxEntries or config.maxAgeSeconds` +\n      `in ${moduleName}.${className}.${funcName}`;\n  },\n\n  'statuses-or-headers-required': ({moduleName, className, funcName}) => {\n    return `You must define either config.statuses or config.headers` +\n      `in ${moduleName}.${className}.${funcName}`;\n  },\n\n  'invalid-string': ({moduleName, className, funcName, paramName}) => {\n    if (!paramName || !moduleName || !className || !funcName) {\n      throw new Error(`Unexpected input to 'invalid-string' error.`);\n    }\n    return `When using strings, the '${paramName}' parameter must start with ` +\n      `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n      `Please see the docs for ${moduleName}.${className}.${funcName}() for ` +\n      `more info.`;\n  },\n  'channel-name-required': () => {\n    return `You must provide a channelName to construct a ` +\n    `BroadcastCacheUpdate instance.`;\n  },\n  'invalid-responses-are-same-args': () => {\n    return `The arguments passed into responsesAreSame() appear to be ` +\n      `invalid. Please ensure valid Responses are used.`;\n  },\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport messages from './messages.mjs';\nimport '../../_version.mjs';\n\nconst fallback = (code, ...args) => {\n  let msg = code;\n  if (args.length > 0) {\n    msg += ` :: ${JSON.stringify(args)}`;\n  }\n  return msg;\n};\n\nconst generatorFunction = (code, ...args) => {\n  const message = messages[code];\n  if (!message) {\n    throw new Error(`Unable to find message for code '${code}'.`);\n  }\n\n  return message(...args);\n};\n\nconst exportedValue = (process.env.NODE_ENV === 'production') ?\n  fallback : generatorFunction;\n\nexport default exportedValue;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport messageGenerator from '../models/messages/messageGenerator.mjs';\nimport '../_version.mjs';\n\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n  /**\n   *\n   * @param {string} errorCode The error code that\n   * identifies this particular error.\n   * @param {Object=} details Any relevant arguments\n   * that will help developers identify issues should\n   * be added as a key on the context object.\n   */\n  constructor(errorCode, details) {\n    let message = messageGenerator(errorCode, details);\n\n    super(message);\n\n    this.name = errorCode;\n    this.details = details;\n  }\n}\n\nexport {WorkboxError};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nconst _cacheNameDetails = {\n  prefix: 'workbox',\n  suffix: self.registration.scope,\n  googleAnalytics: 'googleAnalytics',\n  precache: 'precache',\n  runtime: 'runtime',\n};\n\nconst _createCacheName = (cacheName) => {\n  return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n    .filter((value) => value.length > 0)\n    .join('-');\n};\n\nconst exports = {\n  updateDetails: (details) => {\n    Object.keys(_cacheNameDetails).forEach((key) => {\n      if (typeof details[key] !== 'undefined') {\n        _cacheNameDetails[key] = details[key];\n      }\n    });\n  },\n  getGoogleAnalyticsName: (userCacheName) => {\n    return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n  },\n  getPrecacheName: (userCacheName) => {\n    return userCacheName || _createCacheName(_cacheNameDetails.precache);\n  },\n  getRuntimeName: (userCacheName) => {\n    return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n  },\n};\n\nexport {exports as cacheNames};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport LOG_LEVELS from '../models/LogLevels.mjs';\nimport '../_version.mjs';\n\nconst GREY = `#7f8c8d`;\nconst GREEN = `#2ecc71`;\nconst YELLOW = `#f39c12`;\nconst RED = `#c0392b`;\nconst BLUE = `#3498db`;\n\nconst getDefaultLogLevel = () => (process.env.NODE_ENV === 'production') ?\n  LOG_LEVELS.warn : LOG_LEVELS.log;\n\nlet logLevel = getDefaultLogLevel();\nconst shouldPrint = (minLevel) => (logLevel <= minLevel);\nconst setLoggerLevel = (newLogLevel) => logLevel = newLogLevel;\nconst getLoggerLevel = () => logLevel;\n\n// We always want groups to be logged unless logLevel is silent.\nconst groupLevel = LOG_LEVELS.error;\n\nconst _print = function(keyName, logArgs, levelColor) {\n  const logLevel = keyName.indexOf('group') === 0 ?\n    groupLevel : LOG_LEVELS[keyName];\n  if (!shouldPrint(logLevel)) {\n    return;\n  }\n\n  if (!levelColor) {\n    console[keyName](...logArgs);\n    return;\n  }\n\n  const logPrefix = [\n    '%cworkbox',\n    `background: ${levelColor}; color: white; padding: 2px 0.5em; ` +\n      `border-radius: 0.5em;`,\n  ];\n  console[keyName](...logPrefix, ...logArgs);\n};\n\nconst groupEnd = () => {\n  if (shouldPrint(groupLevel)) {\n    console.groupEnd();\n  }\n};\n\nconst defaultExport = {\n  groupEnd,\n  unprefixed: {\n    groupEnd,\n  },\n};\n\nconst setupLogs = (keyName, color) => {\n  defaultExport[keyName] =\n    (...args) => _print(keyName, args, color);\n  defaultExport.unprefixed[keyName] =\n    (...args) => _print(keyName, args);\n};\n\nconst levelToColor = {\n  debug: GREY,\n  log: GREEN,\n  warn: YELLOW,\n  error: RED,\n  groupCollapsed: BLUE,\n};\nObject.keys(levelToColor).forEach(\n  (keyName) => setupLogs(keyName, levelToColor[keyName])\n);\n\nexport {getDefaultLogLevel};\nexport {setLoggerLevel};\nexport {getLoggerLevel};\nexport {defaultExport as logger};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {WorkboxError} from '../_private/WorkboxError.mjs';\nimport '../_version.mjs';\n\n/*\n * This method returns true if the current context is a service worker.\n */\nconst isSwEnv = (moduleName) => {\n  if (!('ServiceWorkerGlobalScope' in self)) {\n    throw new WorkboxError('not-in-sw', {moduleName});\n  }\n};\n\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, {moduleName, className, funcName, paramName}) => {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', {\n      moduleName,\n      className,\n      funcName,\n      paramName,\n    });\n  }\n};\n\nconst hasMethod = (object, expectedMethod,\n                   {moduleName, className, funcName, paramName}) => {\n  const type = typeof object[expectedMethod];\n  if (type !== 'function') {\n    throw new WorkboxError('missing-a-method', {paramName, expectedMethod,\n      moduleName, className, funcName});\n  }\n};\n\nconst isType = (object, expectedType,\n                {moduleName, className, funcName, paramName}) => {\n  if (typeof object !== expectedType) {\n    throw new WorkboxError('incorrect-type', {paramName, expectedType,\n      moduleName, className, funcName});\n  }\n};\n\nconst isInstance = (object, expectedClass,\n                    {moduleName, className, funcName, paramName}) => {\n  if (!(object instanceof expectedClass)) {\n    throw new WorkboxError('incorrect-class', {paramName, expectedClass,\n      moduleName, className, funcName});\n  }\n};\n\nconst isOneOf = (value, validValues, {paramName}) => {\n  if (!validValues.includes(value)) {\n    throw new WorkboxError('invalid-value', {\n      paramName,\n      value,\n      validValueDescription: `Valid values are ${JSON.stringify(validValues)}.`,\n    });\n  }\n};\n\nconst isArrayOfClass = (value, expectedClass,\n  {moduleName, className, funcName, paramName}) => {\n  const error = new WorkboxError('not-array-of-class', {\n    value, expectedClass,\n    moduleName, className, funcName, paramName,\n  });\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n\n  for (let item of value) {\n    if (!(item instanceof expectedClass)) {\n      throw error;\n    }\n  }\n};\n\nconst finalExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod,\n  isArray,\n  isInstance,\n  isOneOf,\n  isSwEnv,\n  isType,\n  isArrayOfClass,\n};\n\nexport {finalExports as assert};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport LOG_LEVELS from './models/LogLevels.mjs';\nimport {WorkboxError} from './_private/WorkboxError.mjs';\nimport {cacheNames} from './_private/cacheNames.mjs';\nimport {logger} from './_private/logger.mjs';\nimport {assert} from './_private/assert.mjs';\nimport {setLoggerLevel, getLoggerLevel} from './_private/logger.mjs';\nimport './_version.mjs';\n\n/**\n * This class is never exposed publicly. Inidividual methods are exposed\n * using jsdoc alias commands.\n *\n * @memberof workbox.core\n * @private\n */\nclass WorkboxCore {\n  /**\n   * You should not instantiate this object directly.\n   *\n   * @private\n   */\n  constructor() {\n    // Give our version strings something to hang off of.\n    try {\n      self.workbox.v = self.workbox.v || {};\n    } catch (err) {\n      // NOOP\n    }\n\n    // A WorkboxCore instance must be exported before we can use the logger.\n    // This is so it can get the current log level.\n    if (process.env.NODE_ENV !== 'production') {\n      const padding = '   ';\n      logger.groupCollapsed('Welcome to Workbox!');\n      logger.unprefixed.log(\n        `📖 Read the guides and documentation\\n` +\n        `${padding}https://developers.google.com/web/tools/workbox/`\n      );\n      logger.unprefixed.log(\n        `❓ Use the [workbox] tag on StackOverflow to ask questions\\n` +\n        `${padding}https://stackoverflow.com/questions/ask?tags=workbox`\n      );\n      logger.unprefixed.log(\n        `🐛 Found a bug? Report it on GitHub\\n` +\n        `${padding}https://github.com/GoogleChrome/workbox/issues/new`\n      );\n      logger.groupEnd();\n    }\n  }\n\n  /**\n   * Get the current cache names used by Workbox.\n   *\n   * `cacheNames.precache` is used for precached assets,\n   * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\n   * store `analytics.js`,\n   * and `cacheNames.runtime` is used for everything else.\n   *\n   * @return {Object} An object with `precache` and `runtime` cache names.\n   *\n   * @alias workbox.core.cacheNames\n   */\n  get cacheNames() {\n    return {\n      googleAnalytics: cacheNames.getGoogleAnalyticsName(),\n      precache: cacheNames.getPrecacheName(),\n      runtime: cacheNames.getRuntimeName(),\n    };\n  }\n\n  /**\n   * You can alter the default cache names used by the Workbox modules by\n   * changing the cache name details.\n   *\n   * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\n   *\n   * @param {Object} details\n   * @param {Object} details.prefix The string to add to the beginning of\n   * the precache and runtime cache names.\n   * @param {Object} details.suffix The string to add to the end of\n   * the precache and runtime cache names.\n   * @param {Object} details.precache The cache name to use for precache\n   * caching.\n   * @param {Object} details.runtime The cache name to use for runtime caching.\n   * @param {Object} details.googleAnalytics The cache name to use for\n   * `workbox-google-analytics` caching.\n   *\n   * @alias workbox.core.setCacheNameDetails\n   */\n  setCacheNameDetails(details) {\n    if (process.env.NODE_ENV !== 'production') {\n      Object.keys(details).forEach((key) => {\n        assert.isType(details[key], 'string', {\n          moduleName: 'workbox-core',\n          className: 'WorkboxCore',\n          funcName: 'setCacheNameDetails',\n          paramName: `details.${key}`,\n        });\n      });\n\n      if ('precache' in details && details.precache.length === 0) {\n        throw new WorkboxError('invalid-cache-name', {\n          cacheNameId: 'precache',\n          value: details.precache,\n        });\n      }\n\n      if ('runtime' in details && details.runtime.length === 0) {\n        throw new WorkboxError('invalid-cache-name', {\n          cacheNameId: 'runtime',\n          value: details.runtime,\n        });\n      }\n\n      if ('googleAnalytics' in details &&\n        details.googleAnalytics.length === 0) {\n        throw new WorkboxError('invalid-cache-name', {\n          cacheNameId: 'googleAnalytics',\n          value: details.googleAnalytics,\n        });\n      }\n    }\n\n    cacheNames.updateDetails(details);\n  }\n\n  /**\n   * Get the current log level.\n   *\n   * @return {number}.\n   *\n   * @alias workbox.core.logLevel\n   */\n  get logLevel() {\n    return getLoggerLevel();\n  }\n\n  /**\n   * Set the current log level passing in one of the values from\n   * [LOG_LEVELS]{@link module:workbox-core.LOG_LEVELS}.\n   *\n   * @param {number} newLevel The new log level to use.\n   *\n   * @alias workbox.core.setLogLevel\n   */\n  setLogLevel(newLevel) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(newLevel, 'number', {\n        moduleName: 'workbox-core',\n        className: 'WorkboxCore',\n        funcName: 'logLevel [setter]',\n        paramName: `logLevel`,\n      });\n    }\n\n    if (newLevel > LOG_LEVELS.silent ||\n      newLevel < LOG_LEVELS.debug) {\n      throw new WorkboxError('invalid-value', {\n        paramName: 'logLevel',\n        validValueDescription: `Please use a value from LOG_LEVELS, i.e ` +\n          `'logLevel = workbox.core.LOG_LEVELS.debug'.`,\n        value: newLevel,\n      });\n    }\n\n    setLoggerLevel(newLevel);\n  }\n}\n\nexport default new WorkboxCore();\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nconst getFriendlyURL = (url) => {\n  const urlObj = new URL(url, location);\n  if (urlObj.origin === location.origin) {\n    return urlObj.pathname;\n  }\n  return urlObj.href;\n};\n\nexport {getFriendlyURL};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nexport default {\n  CACHE_DID_UPDATE: 'cacheDidUpdate',\n  CACHE_WILL_UPDATE: 'cacheWillUpdate',\n  CACHED_RESPONSE_WILL_BE_USED: 'cachedResponseWillBeUsed',\n  FETCH_DID_FAIL: 'fetchDidFail',\n  REQUEST_WILL_FETCH: 'requestWillFetch',\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nexport default {\n  filter: (plugins, callbackname) => {\n    return plugins.filter((plugin) => callbackname in plugin);\n  },\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {logger} from './logger.mjs';\nimport {getFriendlyURL} from '../_private/getFriendlyURL.mjs';\nimport pluginEvents from '../models/pluginEvents.mjs';\nimport pluginUtils from '../utils/pluginUtils.mjs';\nimport '../_version.mjs';\n\n/**\n * Wrapper around cache.put().\n *\n * Will call `cacheDidUpdate` on plugins if the cache was updated.\n *\n * @param {string} cacheName\n * @param {Request} request\n * @param {Response} response\n * @param {Array<Object>} [plugins]\n *\n * @private\n * @memberof module:workbox-core\n */\nconst putWrapper = async (cacheName, request, response, plugins = []) => {\n  let responseToCache = await _isResponseSafeToCache(\n    request, response, plugins);\n\n  // TODO If response is not safe to cache - print info to log.\n\n  if (!responseToCache) {\n    return;\n  }\n\n  const cache = await caches.open(cacheName);\n\n  const updatePlugins = pluginUtils.filter(\n    plugins, pluginEvents.CACHE_DID_UPDATE);\n\n  let oldResponse = updatePlugins.length > 0 ?\n    await matchWrapper(cacheName, request) : null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\n      `${getFriendlyURL(request.url)}.`);\n  }\n\n  // Regardless of whether or not we'll end up invoking\n  // cacheDidUpdate, wait until the cache is updated.\n  await cache.put(request, responseToCache);\n\n  for (let plugin of updatePlugins) {\n    await plugin[pluginEvents.CACHE_DID_UPDATE].call(plugin, {\n      cacheName,\n      request,\n      oldResponse,\n      newResponse: responseToCache,\n    });\n  }\n};\n\n/**\n * This is a wrapper around cache.match().\n *\n * @param {string} cacheName Name of the cache to match against.\n * @param {Request} request The Request that will be used to look up cache\n * entries.\n * @param {Object} matchOptions Options passed to cache.match().\n * @param {Array<Object>} [plugins] Array of plugins.\n * @return {Response} A cached response if available.\n *\n * @private\n * @memberof module:workbox-core\n */\nconst matchWrapper = async (cacheName, request, matchOptions, plugins = []) => {\n  const cache = await caches.open(cacheName);\n  let cachedResponse = await cache.match(request, matchOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    if (cachedResponse) {\n      logger.debug(`Found a cached response in '${cacheName}'.`);\n    } else {\n      logger.debug(`No cached response found in '${cacheName}'.`);\n    }\n  }\n  for (let plugin of plugins) {\n    if (pluginEvents.CACHED_RESPONSE_WILL_BE_USED in plugin) {\n      cachedResponse = await plugin[pluginEvents.CACHED_RESPONSE_WILL_BE_USED]\n        .call(plugin, {\n          cacheName,\n          request,\n          matchOptions,\n          cachedResponse,\n        });\n    }\n  }\n  return cachedResponse;\n};\n\n/**\n * This method will call cacheWillUpdate on the available plugins (or use\n * response.ok) to determine if the Response is safe and valid to cache.\n *\n * @param {Request} request\n * @param {Response} response\n * @param {Array<Object>} plugins\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _isResponseSafeToCache = async (request, response, plugins) => {\n  let responseToCache = response;\n  let pluginsUsed = false;\n  for (let plugin of plugins) {\n    if (pluginEvents.CACHE_WILL_UPDATE in plugin) {\n      pluginsUsed = true;\n      responseToCache = await plugin[pluginEvents.CACHE_WILL_UPDATE]\n        .call(plugin, {\n          request,\n          response: responseToCache,\n        });\n    }\n  }\n\n  if (!pluginsUsed) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!responseToCache.ok) {\n        if (responseToCache.status === 0) {\n          // TODO: Add a link to guide on third-party request handling\n          logger.warn(`The response for '${request.url}' is an opaque ` +\n            `response. The caching strategy that you're using will not ` +\n            `cache opaque responses by default.`);\n        } else {\n          logger.debug(`The response for '${request.url}' returned ` +\n          `a status code of '${response.status}' and won't be cached as a ` +\n          `result.`);\n        }\n      }\n    }\n    responseToCache = responseToCache.ok ? responseToCache : null;\n  }\n\n  return responseToCache;\n};\n\nconst exports = {\n  put: putWrapper,\n  match: matchWrapper,\n};\n\nexport {exports as cacheWrapper};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {WorkboxError} from './WorkboxError.mjs';\nimport {logger} from './logger.mjs';\nimport {getFriendlyURL} from '../_private/getFriendlyURL.mjs';\nimport pluginEvents from '../models/pluginEvents.mjs';\nimport pluginUtils from '../utils/pluginUtils.mjs';\nimport '../_version.mjs';\n\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Request|string} request\n * @param {Object} fetchOptions\n * @param {Array<Object>} [plugins]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async (request, fetchOptions, plugins = []) => {\n  if (typeof request === 'string') {\n    request = new Request(request);\n  }\n\n  // TODO Move to assertion\n  // assert.isInstance({request}, Request);\n\n  const failedFetchPlugins = pluginUtils.filter(\n    plugins, pluginEvents.FETCH_DID_FAIL);\n\n  // If there is a fetchDidFail plugin, we need to save a clone of the\n  // original request before it's either modified by a requestWillFetch\n  // plugin or before the original request's body is consumed via fetch().\n  const originalRequest = failedFetchPlugins.length > 0 ?\n    request.clone() : null;\n\n  try {\n    for (let plugin of plugins) {\n      if (pluginEvents.REQUEST_WILL_FETCH in plugin) {\n        request = await plugin[pluginEvents.REQUEST_WILL_FETCH].call(plugin, {\n          request: request.clone(),\n        });\n\n        // TODO: Move to assertion\n        // isInstance({request}, Request);\n      }\n    }\n  } catch (err) {\n    throw new WorkboxError('plugin-error-request-will-fetch', {\n      thrownError: err,\n    });\n  }\n\n  // The request can be altered by plugins with `requestWillFetch` making\n  // the original request (Most likely from a `fetch` event) to be different\n  // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n  const pluginFilteredRequest = request.clone();\n\n  // TODO Log when the plugin filtered URL is different from the input request\n\n  try {\n    const response = await fetch(request, fetchOptions);\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Network request for `+\n      `'${getFriendlyURL(request.url)}' returned a response with ` +\n      `status '${response.status}'.`);\n    }\n    return response;\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(`Network request for `+\n      `'${getFriendlyURL(request.url)}' threw an error.`, err);\n    }\n\n    for (let plugin of failedFetchPlugins) {\n      await plugin[pluginEvents.FETCH_DID_FAIL].call(plugin, {\n        originalRequest: originalRequest.clone(),\n        request: pluginFilteredRequest.clone(),\n      });\n    }\n\n    throw err;\n  }\n};\n\nconst exports = {\n  fetch: wrappedFetch,\n};\n\nexport {exports as fetchWrapper};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport '../_version.mjs';\n\n/**\n * A class that wraps common IndexedDB functionality in a promise-based API.\n * It exposes all the underlying power and functionality of IndexedDB, but\n * wraps the most commonly used features in a way that's much simpler to use.\n *\n * @private\n */\nclass DBWrapper {\n  /**\n   * @param {string} name\n   * @param {number} version\n   * @param {Object=} [callback]\n   * @param {function(this:DBWrapper, Event)} [callbacks.onupgradeneeded]\n   * @param {function(this:DBWrapper, Event)} [callbacks.onversionchange]\n   *     Defaults to DBWrapper.prototype._onversionchange when not specified.\n   */\n  constructor(name, version, {\n    onupgradeneeded,\n    onversionchange = this._onversionchange,\n  } = {}) {\n    this._name = name;\n    this._version = version;\n    this._onupgradeneeded = onupgradeneeded;\n    this._onversionchange = onversionchange;\n\n    // If this is null, it means the database isn't open.\n    this._db = null;\n  }\n\n  /**\n   * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n   * callback, and added an onversionchange callback to the database.\n   *\n   * @return {IDBDatabase}\n   *\n   * @private\n   */\n  async open() {\n    if (this._db) return;\n\n    this._db = await new Promise((resolve, reject) => {\n      // This flag is flipped to true if the timeout callback runs prior\n      // to the request failing or succeeding. Note: we use a timeout instead\n      // of an onblocked handler since there are cases where onblocked will\n      // never never run. A timeout better handles all possible scenarios:\n      // https://github.com/w3c/IndexedDB/issues/223\n      let openRequestTimedOut = false;\n      setTimeout(() => {\n        openRequestTimedOut = true;\n        reject(new Error('The open request was blocked and timed out'));\n      }, this.OPEN_TIMEOUT);\n\n      const openRequest = indexedDB.open(this._name, this._version);\n      openRequest.onerror = (evt) => reject(openRequest.error);\n      openRequest.onupgradeneeded = (evt) => {\n        if (openRequestTimedOut) {\n          openRequest.transaction.abort();\n          evt.target.result.close();\n        } else if (this._onupgradeneeded) {\n          this._onupgradeneeded(evt);\n        }\n      };\n      openRequest.onsuccess = (evt) => {\n        const db = evt.target.result;\n        if (openRequestTimedOut) {\n          db.close();\n        } else {\n          db.onversionchange = this._onversionchange;\n          resolve(db);\n        }\n      };\n    });\n\n    return this;\n  }\n\n  /**\n   * Delegates to the native `get()` method for the object store.\n   *\n   * @param {string} storeName The name of the object store to put the value.\n   * @param {...*} args The values passed to the delegated method.\n   * @return {*} The key of the entry.\n   *\n   * @private\n   */\n  async get(storeName, ...args) {\n    return await this._call('get', storeName, 'readonly', ...args);\n  }\n\n  /**\n   * Delegates to the native `add()` method for the object store.\n   *\n   * @param {string} storeName The name of the object store to put the value.\n   * @param {...*} args The values passed to the delegated method.\n   * @return {*} The key of the entry.\n   *\n   * @private\n   */\n  async add(storeName, ...args) {\n    return await this._call('add', storeName, 'readwrite', ...args);\n  }\n\n  /**\n   * Delegates to the native `put()` method for the object store.\n   *\n   * @param {string} storeName The name of the object store to put the value.\n   * @param {...*} args The values passed to the delegated method.\n   * @return {*} The key of the entry.\n   *\n   * @private\n   */\n  async put(storeName, ...args) {\n    return await this._call('put', storeName, 'readwrite', ...args);\n  }\n\n  /**\n   * Delegates to the native `delete()` method for the object store.\n   *\n   * @param {string} storeName\n   * @param {...*} args The values passed to the delegated method.\n   *\n   * @private\n   */\n  async delete(storeName, ...args) {\n    await this._call('delete', storeName, 'readwrite', ...args);\n  }\n\n  /**\n   * Delegates to the native `getAll()` or polyfills it via the `find()`\n   * method in older browsers.\n   *\n   * @param {string} storeName\n   * @param {*} query\n   * @param {number} count\n   * @return {Array}\n   *\n   * @private\n   */\n  async getAll(storeName, query, count) {\n    if ('getAll' in IDBObjectStore.prototype) {\n      return await this._call('getAll', storeName, 'readonly', query, count);\n    } else {\n      return await this.getAllMatching(storeName, {query, count});\n    }\n  }\n\n  /**\n   * Supports flexible lookup in an object store by specifying an index,\n   * query, direction, and count. This method returns an array of objects\n   * with the signature .\n   *\n   * @param {string} storeName\n   * @param {Object} [opts]\n   * @param {IDBCursorDirection} [opts.direction]\n   * @param {*} [opts.query]\n   * @param {string} [opts.index] The index to use (if specified).\n   * @param {number} [opts.count] The max number of results to return.\n   * @param {boolean} [opts.includeKeys] When true, the structure of the\n   *     returned objects is changed from an array of values to an array of\n   *     objects in the form {key, primaryKey, value}.\n   * @return {Array}\n   *\n   * @private\n   */\n  async getAllMatching(storeName, opts = {}) {\n    return await this.transaction([storeName], 'readonly', (stores, done) => {\n      const store = stores[storeName];\n      const target = opts.index ? store.index(opts.index) : store;\n      const results = [];\n\n      target.openCursor(opts.query, opts.direction).onsuccess = (evt) => {\n        const cursor = evt.target.result;\n        if (cursor) {\n          const {primaryKey, key, value} = cursor;\n          results.push(opts.includeKeys ? {primaryKey, key, value} : value);\n          if (opts.count && results.length >= opts.count) {\n            done(results);\n          } else {\n            cursor.continue();\n          }\n        } else {\n          done(results);\n        }\n      };\n    });\n  }\n\n  /**\n   * Accepts a list of stores, a transaction type, and a callback and\n   * performs a transaction. A promise is returned that resolves to whatever\n   * value the callback chooses. The callback holds all the transaction logic\n   * and is invoked with three arguments:\n   *   1. An object mapping object store names to IDBObjectStore values.\n   *   2. A `done` function, that's used to resolve the promise when\n   *      when the transaction is done.\n   *   3. An `abort` function that can be called to abort the transaction\n   *      at any time.\n   *\n   * @param {Array<string>} storeNames An array of object store names\n   *     involved in the transaction.\n   * @param {string} type Can be `readonly` or `readwrite`.\n   * @param {function(Object, function(), function(*)):?IDBRequest} callback\n   * @return {*} The result of the transaction ran by the callback.\n   *\n   * @private\n   */\n  async transaction(storeNames, type, callback) {\n    await this.open();\n    const result = await new Promise((resolve, reject) => {\n      const txn = this._db.transaction(storeNames, type);\n      const done = (value) => resolve(value);\n      const abort = () => {\n        reject(new Error('The transaction was manually aborted'));\n        txn.abort();\n      };\n      txn.onerror = (evt) => reject(evt.target.error);\n      txn.onabort = (evt) => reject(evt.target.error);\n      txn.oncomplete = () => resolve();\n\n      const stores = {};\n      for (const storeName of storeNames) {\n        stores[storeName] = txn.objectStore(storeName);\n      }\n      callback(stores, done, abort);\n    });\n    return result;\n  }\n\n  /**\n   * Delegates async to a native IDBObjectStore method.\n   *\n   * @param {string} method The method name.\n   * @param {string} storeName The object store name.\n   * @param {string} type Can be `readonly` or `readwrite`.\n   * @param {...*} args The list of args to pass to the native method.\n   * @return {*} The result of the transaction.\n   *\n   * @private\n   */\n  async _call(method, storeName, type, ...args) {\n    await this.open();\n    const callback = (stores, done) => {\n      stores[storeName][method](...args).onsuccess = (evt) => {\n        done(evt.target.result);\n      };\n    };\n\n    return await this.transaction([storeName], type, callback);\n  }\n\n  /**\n   * The default onversionchange handler, which closes the database so other\n   * connections can open without being blocked.\n   *\n   * @param {Event} evt\n   *\n   * @private\n   */\n  _onversionchange(evt) {\n    this.close();\n  }\n\n  /**\n   * Closes the connection opened by `DBWrapper.open()`. Generally this method\n   * doesn't need to be called since:\n   *   1. It's usually better to keep a connection open since opening\n   *      a new connection is somewhat slow.\n   *   2. Connections are automatically closed when the reference is\n   *      garbage collected.\n   * The primary use case for needing to close a connection is when another\n   * reference (typically in another tab) needs to upgrade it and would be\n   * blocked by the current, open connection.\n   *\n   * @private\n   */\n  close() {\n    if (this._db) this._db.close();\n  }\n}\n\n// Exposed to let users modify the default timeout on a per-instance\n// or global basis.\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\n\nexport {DBWrapper};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n// We either expose defaults or we expose every named export.\nimport {assert} from './_private/assert.mjs';\nimport {cacheWrapper} from './_private/cacheWrapper.mjs';\nimport {fetchWrapper} from './_private/fetchWrapper.mjs';\nimport {DBWrapper} from './_private/DBWrapper.mjs';\nimport {logger} from './_private/logger.mjs';\nimport {WorkboxError} from './_private/WorkboxError.mjs';\nimport {cacheNames} from './_private/cacheNames.mjs';\nimport {getFriendlyURL} from './_private/getFriendlyURL.mjs';\nimport './_version.mjs';\n\nexport {\n  logger,\n  assert,\n  cacheNames,\n  cacheWrapper,\n  fetchWrapper,\n  WorkboxError,\n  DBWrapper,\n  getFriendlyURL,\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport defaultExport from './_default.mjs';\nimport LOG_LEVELS from './models/LogLevels.mjs';\nimport * as _private from './_private.mjs';\nimport './_version.mjs';\n\nconst finalExports = Object.assign(defaultExport, {\n  LOG_LEVELS,\n  _private,\n});\n\nexport default finalExports;\n"],"names":["workbox","v","e","paramName","validValueDescription","value","Error","JSON","stringify","moduleName","className","funcName","expectedType","expectedClass","name","expectedMethod","entry","firstEntry","secondEntry","thrownError","message","cacheNameId","method","methodName","generatorFunction","code","args","messages","exportedValue","process","WorkboxError","errorCode","details","messageGenerator","_cacheNameDetails","self","registration","scope","_createCacheName","cacheName","prefix","suffix","filter","length","join","exports","keys","forEach","key","userCacheName","googleAnalytics","precache","runtime","GREY","GREEN","YELLOW","RED","BLUE","getDefaultLogLevel","LOG_LEVELS","log","logLevel","shouldPrint","minLevel","setLoggerLevel","newLogLevel","getLoggerLevel","groupLevel","error","_print","keyName","logArgs","levelColor","indexOf","logPrefix","groupEnd","defaultExport","setupLogs","color","unprefixed","levelToColor","Object","isSwEnv","isArray","Array","hasMethod","object","type","isType","isInstance","isOneOf","validValues","includes","isArrayOfClass","item","finalExports","WorkboxCore","err","padding","groupCollapsed","cacheNames","getGoogleAnalyticsName","getPrecacheName","getRuntimeName","updateDetails","newLevel","silent","debug","getFriendlyURL","url","urlObj","URL","location","origin","pathname","href","plugins","callbackname","plugin","putWrapper","request","response","responseToCache","_isResponseSafeToCache","cache","caches","open","updatePlugins","pluginUtils","pluginEvents","CACHE_DID_UPDATE","oldResponse","matchWrapper","put","call","matchOptions","cachedResponse","match","CACHED_RESPONSE_WILL_BE_USED","pluginsUsed","CACHE_WILL_UPDATE","ok","status","warn","wrappedFetch","fetchOptions","Request","failedFetchPlugins","FETCH_DID_FAIL","originalRequest","clone","REQUEST_WILL_FETCH","pluginFilteredRequest","fetch","DBWrapper","version","_onversionchange","_name","_version","_onupgradeneeded","onupgradeneeded","onversionchange","_db","Promise","resolve","reject","openRequestTimedOut","OPEN_TIMEOUT","openRequest","indexedDB","onerror","evt","transaction","abort","target","result","close","onsuccess","db","storeName","_call","query","count","IDBObjectStore","prototype","getAllMatching","opts","stores","done","store","index","results","openCursor","direction","cursor","primaryKey","push","includeKeys","continue","storeNames","callback","txn","onabort","oncomplete","objectStore","assign"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}