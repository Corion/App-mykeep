{"version":3,"file":"workbox-routing.prod.js","sources":["packages/workbox-routing/_version.mjs","packages/workbox-routing/utils/normalizeHandler.mjs","packages/workbox-routing/Route.mjs","packages/workbox-routing/utils/constants.mjs","packages/workbox-routing/RegExpRoute.mjs","packages/workbox-routing/Router.mjs","packages/workbox-routing/NavigationRoute.mjs","packages/workbox-routing/_default.mjs","packages/workbox-routing/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:routing:3.0.0-alpha.1']=1;}catch(e){} // eslint-disable-line","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n\n/**\n * @param {function|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport default (handler) => {\n  if (handler && typeof handler === 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.hasMethod(handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'handler',\n      });\n    }\n    return handler;\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(handler, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'handler',\n      });\n    }\n    return {handle: handler};\n  }\n};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport {defaultMethod, validMethods} from './utils/constants.mjs';\nimport normalizeHandler from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox.routing\n */\nclass Route {\n  /**\n   * Constructor for Route class.\n   *\n   * @param {workbox.routing.Route~matchCallback} match\n   * A callback function that determines whether the route matches a given\n   * `fetch` event by returning a non-falsy value.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(match, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(match, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'match',\n      });\n\n      if (method) {\n        assert.isOneOf(method, validMethods, {paramName: 'method'});\n      }\n    }\n\n    // These values are referenced directly by Router so cannot be\n    // altered by minifification.\n    this.handler = normalizeHandler(handler);\n    this.match = match;\n    this.method = method || defaultMethod;\n  }\n}\n\nexport {Route};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport '../_version.mjs';\n\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n  'DELETE',\n  'GET',\n  'HEAD',\n  'POST',\n  'PUT',\n];\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link workbox.routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/v3/modules/workbox-routing}\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass RegExpRoute extends Route {\n  /**\n   * If the regulard expression contains\n   * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n   * th ecaptured values will be passed to the\n   * [handler's]{@link workbox.routing.Route~handlerCallback} `params`\n   * argument.\n   *\n   * @param {RegExp} regExp The regular expression to match against URLs.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(regExp, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(regExp, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'RegExpRoute',\n        funcName: 'constructor',\n        paramName: 'pattern',\n      });\n    }\n\n    const match = ({url}) => {\n      const result = regExp.exec(url.href);\n\n      // Return null immediately if there's no match.\n      if (!result) {\n        return null;\n      }\n\n      // Require that the match start at the first character in the URL string\n      // if it's a cross-origin request.\n      // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n      // behind this behavior.\n      if ((url.origin !== location.origin) && (result.index !== 0)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\n            `The regular expression '${regExp}' only partially matched ` +\n            `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n            `handle cross-origin requests if they match the entire URL.`\n          );\n        }\n\n        return null;\n      }\n\n      // If the route matches, but there aren't any capture groups defined, then\n      // this will return [], which is truthy and therefore sufficient to\n      // indicate a match.\n      // If there are capture groups, then it will return their values.\n      return result.slice(1);\n    };\n\n    super(match, handler, method);\n  }\n}\n\nexport {RegExpRoute};\n","/*\n Copyright 2017 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\n\nimport normalizeHandler from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link workbox.routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox.routing\n */\nclass Router {\n  /**\n   * Initializes a new Router.\n   */\n  constructor() {\n    // _routes will contain a mapping of HTTP method name ('GET', etc.) to an\n    // array of all the corresponding Route instances that are registered.\n    this._routes = new Map();\n  }\n\n  /**\n   * Apply the routing rules to a FetchEvent object to get a Response from an\n   * appropriate Route's handler.\n   *\n   * @param {FetchEvent} event The event from a service worker's 'fetch' event\n   * listener.\n   * @return {Promise<Response>|undefined} A promise is returned if a\n   * registered route can handle the FetchEvent's request. If there is no\n   * matching route and there's no `defaultHandler`, `undefined` is returned.\n   */\n  handleRequest(event) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(event, FetchEvent, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'handleRequest',\n        paramName: 'event',\n      });\n    }\n\n    const url = new URL(event.request.url);\n    if (!url.protocol.startsWith('http')) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\n          `Workbox Router only supports URLs that start with 'http'.`);\n      }\n      return;\n    }\n\n    let route = null;\n    let handler = null;\n    let params = null;\n    let debugMessages = [];\n\n    const result = this._findHandlerAndParams(event, url);\n    handler = result.handler;\n    params = result.params;\n    route = result.route;\n    if (process.env.NODE_ENV !== 'production') {\n      if (handler) {\n        debugMessages.push([\n          `Found a route to handle this request:`, route,\n        ]);\n\n        if (params) {\n          debugMessages.push([\n            `Passing the following params to the route's handler:`, params,\n          ]);\n        }\n      }\n    }\n\n    // If we don't have a handler because there was no matching route, then\n    // fall back to defaultHandler if that's defined.\n    if (!handler && this._defaultHandler) {\n      if (process.env.NODE_ENV !== 'production') {\n        debugMessages.push(`Failed to find a matching route. Falling ` +\n          `back to the default handler.`);\n\n        // This is used for debugging in logs in the case of an error.\n        route = '[Default Handler]';\n      }\n      handler = this._defaultHandler;\n    }\n\n    if (!handler) {\n      if (process.env.NODE_ENV !== 'production') {\n        // No handler so Workbox will do nothing. If logs is set of debug\n        // i.e. verbose, we should print out this information.\n        logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n      }\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We have a handler, meaning Workbox is going to handle the route.\n      // print the routing details to the console.\n      logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n      debugMessages.forEach((msg) => {\n        if (Array.isArray(msg)) {\n          logger.log(...msg);\n        } else {\n          logger.log(msg);\n        }\n      });\n\n      // The Request and Response objects contains a great deal of information,\n      // hide it under a group in case developers want to see it.\n      logger.groupCollapsed(`View request details here.`);\n      logger.unprefixed.log(event.request);\n      logger.groupEnd();\n\n      logger.groupEnd();\n    }\n\n    // Wrap in try and catch in case the handle method throws a synchronous\n    // error. It should still callback to the catch handler.\n    let responsePromise;\n    try {\n      responsePromise = handler.handle({url, event, params});\n    } catch (err) {\n      responsePromise = Promise.reject(err);\n    }\n\n    if (responsePromise && this._catchHandler) {\n      responsePromise = responsePromise.catch((err) => {\n        if (process.env.NODE_ENV !== 'production') {\n          // Still include URL here as it will be async from the console group\n          // and may not make sense without the URL\n          logger.groupCollapsed(`Error thrown when responding to: ` +\n            ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n          logger.unprefixed.error(`Error thrown by:`, route);\n          logger.unprefixed.error(err);\n          logger.groupEnd();\n        }\n        return this._catchHandler.handle({url, event, err});\n      });\n    }\n\n    return responsePromise;\n  }\n\n  /**\n   * Checks the incoming `event.request` against the registered routes, and if\n   * there's a match, returns the corresponding handler along with any params\n   * generated by the match.\n   *\n   * @param {FetchEvent} event\n   * @param {URL} url\n   * @return {Object} Returns an object with `handler` and `params` properties.\n   * They are populated if a matching route was found or `undefined` otherwise.\n   *\n   * @private\n   */\n  _findHandlerAndParams(event, url) {\n    const routes = this._routes.get(event.request.method) || [];\n    for (const route of routes) {\n      let matchResult = route.match({url, event});\n      if (matchResult) {\n        if (Array.isArray(matchResult) && matchResult.length === 0) {\n          // Instead of passing an empty array in as params, use undefined.\n          matchResult = undefined;\n        } else if ((matchResult.constructor === Object &&\n          Object.keys(matchResult).length === 0) || matchResult === true) {\n          // Instead of passing an empty object in as params, use undefined.\n          matchResult = undefined;\n        }\n\n        // Break out of the loop and return the appropriate values as soon as\n        // we have a match.\n        return {\n          route,\n          params: matchResult,\n          handler: route.handler,\n        };\n      }\n    }\n\n    // If we didn't have a match, then return undefined values.\n    return {handler: undefined, params: undefined};\n  }\n\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setDefaultHandler(handler) {\n    this._defaultHandler = normalizeHandler(handler);\n  }\n\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setCatchHandler(handler) {\n    this._catchHandler = normalizeHandler(handler);\n  }\n\n  /**\n   * Registers a route with the router.\n   *\n   * @param {workbox.routing.Route} route The route to register.\n   */\n  registerRoute(route) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(route, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.hasMethod(route, 'match', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.isType(route.handler, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.hasMethod(route.handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.handler',\n      });\n\n      assert.isType(route.method, 'string', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.method',\n      });\n    }\n\n    if (!this._routes.has(route.method)) {\n      this._routes.set(route.method, []);\n    }\n\n    // Give precedence to all of the earlier routes by adding this additional\n    // route to the end of the array.\n    this._routes.get(route.method).push(route);\n  }\n\n  /**\n   * Unregisters a route with the router.\n   *\n   * @param {workbox.routing.Route} route The route to unregister.\n   */\n  unregisterRoute(route) {\n    if (!this._routes.has(route.method)) {\n      throw new WorkboxError(\n        'unregister-route-but-not-found-with-method', {\n          method: route.method,\n        }\n      );\n    }\n\n    const routeIndex = this._routes.get(route.method).indexOf(route);\n    if (routeIndex > -1) {\n      this._routes.get(route.method).splice(routeIndex, 1);\n    } else {\n      throw new WorkboxError('unregister-route-route-not-registered');\n    }\n  }\n}\n\nexport {Router};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * NavigationRoute makes it easy to create a [Route]{@link\n * workbox.routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `blacklist` and `whitelist` parameters.\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass NavigationRoute extends Route {\n  /**\n   * If both `blacklist` and `whiltelist` are provided, the `blacklist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `whitelist` and `blacklist`\n   * are matched against the concatenated\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n   * portions of the requested URL.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {Object} options\n   * @param {Array<RegExp>} [options.blacklist] If any of these patterns match,\n   * the route will not handle the request (even if a whitelist RegExp matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   */\n  constructor(handler, {whitelist = [/./], blacklist = []} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(whitelist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.whitelist',\n      });\n      assert.isArrayOfClass(blacklist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.blacklist',\n      });\n    }\n\n    super((...args) => this._match(...args), handler);\n\n    this._whitelist = whitelist;\n    this._blacklist = blacklist;\n  }\n\n  /**\n   * Routes match handler.\n   *\n   * @param {Object} input\n   * @param {FetchEvent} input.event\n   * @param {URL} input.url\n   * @return {boolean}\n   *\n   * @private\n   */\n  _match({event, url}) {\n    if (event.request.mode !== 'navigate') {\n      return false;\n    }\n\n    const pathnameAndSearch = url.pathname + url.search;\n\n    if (this._blacklist.some((regExp) => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`The navigation route is not being used, since the ` +\n          `request URL matches both the whitelist and blacklist.`);\n      }\n      return false;\n    }\n\n    if (this._whitelist.some((regExp) => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`The navigation route is being used.`);\n      }\n      return true;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\n          `The navigation route is not being used, since the ` +\n          `URL being navigated to doesn't match the whitelist.`\n        );\n      }\n    }\n\n    return false;\n  }\n}\n\nexport {NavigationRoute};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {NavigationRoute} from './NavigationRoute.mjs';\nimport {RegExpRoute} from './RegExpRoute.mjs';\nimport {Router} from './Router.mjs';\nimport {Route} from './Route.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n\nif (process.env.NODE_ENV !== 'production') {\n  assert.isSwEnv('workbox-routing');\n}\n\n/**\n * @private\n */\nclass DefaultRouter extends Router {\n  /**\n   * Easily register a RegExp, string, or function with a caching\n   * strategy to the Router.\n   *\n   * This method will generate a Route for you if needed and\n   * call [Router.registerRoute()]{@link\n   * workbox.routing.Router#registerRoute}.\n   *\n   * @param {\n   * RegExp|\n   * string|\n   * workbox.routing.Route~matchCallback|\n   * workbox.routing.Route\n   * } capture\n   * If the capture param is a `Route`, all other arguments will be ignored.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   * @return {workbox.routing.Route} The generated `Route`(Useful for\n   * unregistering).\n   *\n   * @alias workbox.routing.registerRoute\n   */\n  registerRoute(capture, handler, method = 'GET') {\n    let route;\n\n    if (typeof capture === 'string') {\n      const captureUrl = new URL(capture, location);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n          throw new WorkboxError('invalid-string', {\n            moduleName: 'workbox-routing',\n            className: 'DefaultRouter',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n          });\n        }\n\n        // We want to check if Express-style wildcards are in the pathname only.\n        // TODO: Remove this log message in v4.\n        const valueToCheck = capture.startsWith('http') ?\n          captureUrl.pathname :\n          capture;\n        // See https://github.com/pillarjs/path-to-regexp#parameters\n        const wildcards = '[*:?+]';\n        if (valueToCheck.match(new RegExp(`${wildcards}`))) {\n          logger.debug(\n            `The '$capture' parameter contains an Express-style wildcard ` +\n            `character (${wildcards}). Strings are now always interpreted as ` +\n            `exact matches; use a RegExp for partial or wildcard matches.`\n          );\n        }\n      }\n\n      const matchCallback = ({url}) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if ((url.pathname === captureUrl.pathname) &&\n              (url.origin !== captureUrl.origin)) {\n            logger.debug(\n              `${capture} only partially matches the cross-origin URL ` +\n              `${url}. This route will only handle cross-origin requests ` +\n              `if they match the entire URL.`\n            );\n          }\n        }\n\n        return url.href === captureUrl.href;\n      };\n\n      route = new Route(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n      route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === 'function') {\n      route = new Route(capture, handler, method);\n    } else if (capture instanceof Route) {\n      route = capture;\n    } else {\n      throw new WorkboxError('unsupported-route-type', {\n        moduleName: 'workbox-routing',\n        className: 'DefaultRouter',\n        funcName: 'registerRoute',\n        paramName: 'capture',\n      });\n    }\n\n    super.registerRoute(route);\n    return route;\n  }\n\n  /**\n   * Register a route that will return a precached file for a navigation\n   * request. This is useful for the\n   * [application shell pattern]{@link https://developers.google.com/web/fundamentals/architecture/app-shell}.\n   *\n   * This method will generate a\n   * [NavigationRoute]{@link workbox.routing.NavigationRoute}\n   * and call\n   * [Router.registerRoute()]{@link workbox.routing.Router#registerRoute}\n   * .\n   *\n   * @param {string} cachedAssetUrl\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to precache cache name provided by\n   * [workbox-core.cacheNames]{@link workbox.core.cacheNames}.\n   * @param {Array<RegExp>} [options.blacklist=[]] If any of these patterns\n   * match, the route will not handle the request (even if a whitelist entry\n   * matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   * @return {workbox.routing.NavigationRoute} Returns the generated\n   * Route.\n   *\n   * @alias workbox.routing.registerNavigationRoute\n   */\n  registerNavigationRoute(cachedAssetUrl, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cachedAssetUrl, 'string', {\n        moduleName: 'workbox-routing',\n        className: '[default export]',\n        funcName: 'registerNavigationRoute',\n        paramName: 'cachedAssetUrl',\n      });\n    }\n\n    const cacheName = cacheNames.getPrecacheName(options.cacheName);\n    const handler = () => caches.match(cachedAssetUrl, {cacheName});\n    const route = new NavigationRoute(handler, {\n      whitelist: options.whitelist,\n      blacklist: options.blacklist,\n    });\n    super.registerRoute(\n      route\n    );\n    return route;\n  }\n}\n\nconst router = new DefaultRouter();\n\n// By default, register a fetch event listener that will respond to a request\n// only if there's a matching route.\nself.addEventListener('fetch', (event) => {\n  const responsePromise = router.handleRequest(event);\n  if (responsePromise) {\n    event.respondWith(responsePromise);\n  }\n});\n\nexport default router;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n\nimport * as publicAPI from './_public.mjs';\nimport defaultExport from './_default.mjs';\nimport './_version.mjs';\n\nconst finalExport = Object.assign(defaultExport, publicAPI);\n\nexport default finalExport;\n"],"names":["workbox","v","e","handler","handle","Route","match","method","normalizeHandler","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","event","URL","request","protocol","startsWith","params","this","_findHandlerAndParams","_defaultHandler","responsePromise","err","Promise","reject","_catchHandler","catch","routes","get","route","matchResult","Array","isArray","length","undefined","constructor","Object","keys","has","set","push","WorkboxError","routeIndex","indexOf","splice","NavigationRoute","whitelist","blacklist","args","_match","_whitelist","_blacklist","mode","pathnameAndSearch","pathname","search","some","test","DefaultRouter","capture","captureUrl","RegExp","registerRoute","cachedAssetUrl","options","cacheName","cacheNames","getPrecacheName","caches","router","self","addEventListener","handleRequest","respondWith","assign","defaultExport","publicAPI"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}