=head1 NAME

App::mykeep

=over 4

=item *

Use L<HTTP::Upload::FlowJs> for sync, with web worker

This would help with flaky connections and large images. Currently each
note is treated as a single opaque block that needs to be uploaded in one go

=item *

Consider L<Plack::Middleware::Auth::JWT> for authentication
instead of using just cookies?

=item *

Encrypt data at rest, at least on the mothership?

How will we share the key among the clients

=item *

Statically compile the templates to Javascript

If all else fails, use L<Javascript::Duktape>

=item *

Google Keep import

=item *

Google Keep synchronisation

=item *

Images as separate resources

This will enable the next two items

=item *

Serve a placeholder image and then send the data in a second request
if the client requests that

=item *

Resize images before non-fast upload

=item *

Set C<XSRF-Token> cookie from Perl, expect it as a header

=item *

Make the cookie token HTTP-only

=item *

Sync with IMAP server-side for iDevice import/sync magic

=item *

Export all data as one JSON file (from /notes/list, duh)

=item *

Use C<Cache-Control: immutable> on the Javascript assets, once we're stable
enough

This means that the browser won't even try to ask for assets as long as their
expiration hasn't passed yet.

=back

=head1 FEATURES

=over 4

=item *

Create manifest.json

https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/

=item *

Use heavily cached Javascript page as "App"

=item *

Use Handlebars and MorphDOM for the UI

=item *

Use LocalForage for local storage

=item *

Use camera API for attaching images

L<https://developer.mozilla.org/en-US/docs/Web/Guide/API/Camera>

=item *

Images as data: URIs

=cut